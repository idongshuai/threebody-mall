/**
 * BPMN shapes
 */

Schema.addCategory({
	name: "bpmn",
	text: "<@i18n resource='schema.category.bpmn'/>",
	dataAttributes: [
		{name: "<@i18n resource='schema.diagram.biz.name'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.documentation'/>", type:"string", value:"", category: "default"},
	]
});

	
/**
 * 内圆全局画法
 */
Schema.addGlobalCommand("inneround", [
	{action: "move", x: "3", y: "h*0.5"},
	{action: "curve", x1: "3", y1: "-h/6+4", x2: "w-3", y2: "-h/6+4", x: "w-3", y: "h*0.5"},
	{action: "curve", x1: "w-3", y1: "h+h/6-4", x2: "3", y2: "h+h/6-4", x: "3", y: "h*0.5"}
]);

/**
 * 信：message0
 */
Schema.addGlobalCommand("message0", [
	{action: "move", x: "w*0.5-w*0.3", y: "h*0.5-h*0.2"},
	{action: "line", x: "w*0.5+w*0.3", y: "h*0.5-h*0.2"},
	{action: "line", x: "w*0.5+w*0.3", y: "h*0.5+h*0.2"},
	{action: "line", x: "w*0.5-w*0.3", y: "h*0.5+h*0.2"},
	{action: "line", x: "w*0.5-w*0.3", y: "h*0.5-h*0.2"},
	{action: "close"},
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "line", x: "w*0.5+w*0.3", y: "h*0.5-h*0.2"},
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "line", x: "w*0.5-w*0.3", y: "h*0.5-h*0.2"}
]);

/**
 *钟表：timer0 
 */
Schema.addGlobalCommand("timer0", [
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "move", x: "w*0.5-w*0.3", y: "h*0.5"},
	{action: "curve", x1: "w*0.5-w*0.3", y1: "h*0.5-h*0.6*2/3", x2: "w*0.5+w*0.3", y2: "h*0.5-h*0.6*2/3", x: "w*0.5+w*0.3", y: "h*0.5"},
	{action: "curve", x1: "w*0.5+w*0.3", y1: "h*0.5+h*0.6*2/3", x2: "w*0.5-w*0.3", y2: "h*0.5+h*0.6*2/3", x: "w*0.5-w*0.3", y: "h*0.5"},
	{action: "close"}
]);
Schema.addGlobalCommand("timer0_needle", [
	{action: "move", x: "w*0.5+w*0.15", y: "h*0.5"},
	{action: "line", x: "w*0.5", y: "h*0.5"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/12*5)", y: "h*0.5-h*0.25*Math.sin(Math.PI/12*5)"},
	{action: "line", x: "w*0.5", y: "h*0.5"}
]);
Schema.addGlobalCommand("timer0_num",[
	{action: "move", x: "w*0.5+w*0.3*Math.cos(0)", y: "h*0.5+h*0.3*Math.sin(0)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(0)", y: "h*0.5+h*0.25*Math.sin(0)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6*2)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6*2)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6*2)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6*2)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6*3)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6*3)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6*3)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6*3)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6*4)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6*4)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6*4)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6*4)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6*5)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6*5)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6*5)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6*5)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6*6)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6*6)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6*6)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6*6)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6*7)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6*7)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6*7)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6*7)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6*8)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6*8)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6*8)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6*8)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6*9)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6*9)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6*9)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6*9)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6*10)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6*10)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6*10)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6*10)"},
	{action: "move", x: "w*0.5+w*0.3*Math.cos(Math.PI/6*11)", y: "h*0.5+h*0.3*Math.sin(Math.PI/6*11)"},
	{action: "line", x: "w*0.5+w*0.25*Math.cos(Math.PI/6*11)", y: "h*0.5+h*0.25*Math.sin(Math.PI/6*11)"}
]);

/**
*conditional0
*/
Schema.addGlobalCommand("conditional0", [
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "move", x: "w*0.5-w*0.25", y: "h*0.5-h*0.25"},
	{action: "line", x: "w*0.5+w*0.25", y: "h*0.5-h*0.25"},
	{action: "line", x: "w*0.5+w*0.25", y: "h*0.5+h*0.25"},
	{action: "line", x: "w*0.5-w*0.25", y: "h*0.5+h*0.25"},
	{action: "line", x: "w*0.5-w*0.25", y: "h*0.5-h*0.25"},
	{action: "close"},
	{action: "move", x: "w*0.5-w*0.2", y: "h*0.5-h*0.05"},
	{action: "line", x: "w*0.5+w*0.2", y: "h*0.5-h*0.05"},
	{action: "move", x: "w*0.5-w*0.2", y: "h*0.5-h*0.16"},
	{action: "line", x: "w*0.5+w*0.2", y: "h*0.5-h*0.16"},
	{action: "move", x: "w*0.5-w*0.2", y: "h*0.5+h*0.05"},
	{action: "line", x: "w*0.5+w*0.2", y: "h*0.5+h*0.05"},
	{action: "move", x: "w*0.5-w*0.2", y: "h*0.5+h*0.16"},
	{action: "line", x: "w*0.5+w*0.2", y: "h*0.5+h*0.16"}
]);

/**
*escalation0
*/
Schema.addGlobalCommand("escalation0", [
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "line", x: "w*0.5+w*0.2", y: "h*0.5+h*0.25"},
	{action: "line", x: "w*0.5", y: "h*0.5-h*0.25"},
	{action: "line", x: "w*0.5-w*0.2", y: "h*0.5+h*0.25"},
	{action: "line", x: "w*0.5", y: "h*0.5"},
	{action: "close"}
]);

/**
 * signal0
 */
Schema.addGlobalCommand("signal0", [
	{action: "move", x: "w*0.5", y: "h*0.5-h*0.32"},
	{action: "line", x: "w*0.5+w*0.28", y: "h*0.5+h*0.15"},
	{action: "line", x: "w*0.5-w*0.28", y: "h*0.5+h*0.15"},
	{action: "line", x: "w*0.5", y: "h*0.5-h*0.32"},
	{action: "close"}
]);

/**
*compensation0
*/
Schema.addGlobalCommand("compensation0", [
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "line", x: "w*0.5+w*0.25", y: "h*0.5-h*0.2"},
	{action: "line", x: "w*0.5+w*0.25", y: "h*0.5+h*0.2"},
	{action: "line", x: "w*0.5", y: "h*0.5"},
	{action: "close"},
	{action: "move", x: "w*0.5-w*0.25", y: "h*0.5"},
	{action: "line", x: "w*0.5", y: "h*0.5-h*0.2"},
	{action: "line", x: "w*0.5", y: "h*0.5+h*0.2"},
	{action: "line", x: "w*0.5-w*0.25", y: "h*0.5"},
	{action: "close"}
]);

/**
*error0
*/
Schema.addGlobalCommand("error0", [
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "move", x: "w*0.5+w*0.1", y: "h*0.5"},
	{action: "line", x: "w*0.5+w*0.28", y: "h*0.5-h*0.2"},
	{action: "line", x: "w*0.5+w*0.1", y: "h*0.5+h*0.2"},
	{action: "line", x: "w*0.5-w*0.1", y: "h*0.5"},
	{action: "line", x: "w*0.5-w*0.28", y: "h*0.5+h*0.2"},
	{action: "line", x: "w*0.5-w*0.1", y: "h*0.5-h*0.2"},
	{action: "line", x: "w*0.5+w*0.1", y: "h*0.5"},
	{action: "close"}
]);

/**
*multiple0
*/
Schema.addGlobalCommand("multiple0", [
	{action: "move", x: "w*0.5", y: "h*0.5-h*0.28"},
	{action: "line", x: "w*0.5+w*0.28", y: "h*0.5-h*0.08"},
	{action: "line", x: "w*0.5+w*0.17", y: "h*0.5+h*0.25"},
	{action: "line", x: "w*0.5-w*0.17", y: "h*0.5+h*0.25"},
	{action: "line", x: "w*0.5-w*0.28", y: "h*0.5-h*0.08"},
	{action: "line", x: "w*0.5", y: "h*0.5-h*0.28"},
	{action: "close"}
]);

/**
*parallel0
*/
Schema.addGlobalCommand("parallel0", [
	{action: "move", x: "w*0.5+w*0.07", y: "h*0.5-h*0.07"},
	{action: "line", x: "w*0.5+w*0.27", y: "h*0.5-h*0.07"},
	{action: "line", x: "w*0.5+w*0.27", y: "h*0.5+h*0.07"},
	{action: "line", x: "w*0.5+w*0.07", y: "h*0.5+h*0.07"},
	{action: "line", x: "w*0.5+w*0.07", y: "h*0.5+h*0.27"},
	{action: "line", x: "w*0.5-w*0.07", y: "h*0.5+h*0.27"},
	{action: "line", x: "w*0.5-w*0.07", y: "h*0.5+h*0.07"},
	{action: "line", x: "w*0.5-w*0.27", y: "h*0.5+h*0.07"},
	{action: "line", x: "w*0.5-w*0.27", y: "h*0.5-h*0.07"},
	{action: "line", x: "w*0.5-w*0.07", y: "h*0.5-h*0.07"},
	{action: "line", x: "w*0.5-w*0.07", y: "h*0.5-h*0.27"},
	{action: "line", x: "w*0.5+w*0.07", y: "h*0.5-h*0.27"},
	{action: "line", x: "w*0.5+w*0.07", y: "h*0.5-h*0.07"},
	{action: "close"}
]);

/**
*gateway0
*/
Schema.addGlobalCommand("gateway0", [
	{action: "move", x: "0", y: "h*0.5"},
	{action: "line", x: "w*0.5", y: "0"},
	{action: "line", x: "w", y: "h*0.5"},
	{action: "line", x: "w*0.5", y: "h"},
	{action: "line", x: "0", y: "h*0.5"},
	{action: "close"}
]);

/**
 * link3
 */	
Schema.addGlobalCommand("link3", [
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "move", x: "w*0.5-w*0.26", y: "h*0.5-h*0.08"},
	{action: "line", x: "w*0.5+w*0.16", y: "h*0.5-h*0.08"},
	{action: "line", x: "w*0.5+w*0.16", y: "h*0.5-h*0.18"},
	{action: "line", x: "w*0.5+w*0.26", y: "h*0.5"},
	{action: "line", x: "w*0.5+w*0.16", y: "h*0.5+h*0.18"},
	{action: "line", x: "w*0.5+w*0.16", y: "h*0.5+h*0.08"},
	{action: "line", x: "w*0.5-w*0.26", y: "h*0.5+h*0.08"},
	{action: "close"}
]);	

/**
 * cancel3
 */
Schema.addGlobalCommand("cancel3", [
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "move", x: "w*0.5", y: "h*0.5-h*0.1"},
	{action: "line", x: "w*0.5+w*0.16", y: "h*0.5-h*0.25"},
	{action: "line", x: "w*0.5+w*0.25", y: "h*0.5-h*0.16"},
	{action: "line", x: "w*0.5+w*0.1", y: "h*0.5"},
	{action: "line", x: "w*0.5+w*0.25", y: "h*0.5+h*0.16"},
	{action: "line", x: "w*0.5+w*0.16", y: "h*0.5+h*0.25"},
	{action: "line", x: "w*0.5", y: "h*0.5+h*0.1"},
	{action: "line", x: "w*0.5-w*0.16", y: "h*0.5+h*0.25"},
	{action: "line", x: "w*0.5-w*0.25", y: "h*0.5+h*0.16"},
	{action: "line", x: "w*0.5-w*0.1", y: "h*0.5"},
	{action: "line", x: "w*0.5-w*0.25", y: "h*0.5-h*0.16"},
	{action: "line", x: "w*0.5-w*0.16", y: "h*0.5-h*0.25"},
	{action: "line", x: "w*0.5", y: "h*0.5-h*0.1"},
	{action: "close"}
]);

/**
 * message4
 */
Schema.addGlobalCommand("message4", [
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "move", x: "w*0.5-w*0.3", y: "h*0.5-h*0.2"},
	{action: "line", x: "w*0.5+w*0.3", y: "h*0.5-h*0.2"},
	{action: "line", x: "w*0.5+w*0.3", y: "h*0.5+h*0.2"},
	{action: "line", x: "w*0.5-w*0.3", y: "h*0.5+h*0.2"},
	{action: "line", x: "w*0.5-w*0.3", y: "h*0.5-h*0.2"},
	{action: "close"}
]);
Schema.addGlobalCommand("message4_0", [
	{action: "move", x: "w*0.5-w*0.3", y: "h*0.5-h*0.2"},
	{action: "line", x: "w*0.5", y: "h*0.5"},
	{action: "line", x: "w*0.5+w*0.3", y: "h*0.5-h*0.2"},
	{action: "line", x: "w*0.5", y: "h*0.5"},
	{action: "close"}
]);

/**
 * g_round
 */
Schema.addGlobalCommand("g_round", [
	{action: "move", x: "w*0.5 - w*0.25", y:"h*0.5"},
	{action: "curve", x1: "w*0.5 - w*0.25", y1: "h*0.5 - h*2/3*0.5", x2: "w*0.5 + w*0.25", y2: "h*0.5 - h*2/3*0.5", x: "w*0.5 + w*0.25", y: "h*0.5"},
	{action: "curve", x1: "w*0.5 + w*0.25", y1: "h*0.5 + h*2/3*0.5", x2: "w*0.5 - w*0.25", y2: "h*0.5 + h*2/3*0.5", x: "w*0.5 - w*0.25", y: "h*0.5"},
	{action: "close"}
]);

/**
 * manual_task
 */
Schema.addGlobalCommand("manual_task", [
	{action: "move", x: "100*0.15- 100*0.08", y: "60*0.2"},
	{action: "line", x: "100*0.15- 100*0.04", y: "60*0.2"},
	{action: "line", x: "100*0.15+ 100*0.01", y: "60*0.13"},
	{action: "line", x: "100*0.15+ 100*0.04", y: "60*0.13"},
	{action: "line", x: "100*0.15 + 100*0.04", y: "60*0.17"},
	{action: "line", x: "100*0.15+ 100*0.01", y: "60*0.17"},
	{action: "line", x: "100*0.15+ 100*0.1", y: "60*0.17"},
	{action: "line", x: "100*0.15+ 100*0.1", y: "60*0.21"},
	{action: "line", x: "100*0.15+ 100*0.01", y: "60*0.21"},
	{action: "line", x: "100*0.15+ 100*0.06", y: "60*0.21"},
	{action: "line", x: "100*0.15+ 100*0.06", y: "60*0.25"},
	{action: "line", x: "100*0.15+ 100*0.01", y: "60*0.25"},
	{action: "line", x: "100*0.15+ 100*0.06", y: "60*0.25"},
	{action: "line", x: "100*0.15+ 100*0.06", y: "60*0.29"},
	{action: "line", x: "100*0.15+ 100*0.06", y: "60*0.29"},
	{action: "line", x: "100*0.15+ 100*0.04", y: "60*0.29"},
	{action: "line", x: "100*0.15+ 100*0.04", y: "60*0.33"},
	{action: "line", x: "100*0.15- 100*0.04", y: "60*0.33"},
	{action: "line", x: "100*0.15- 100*0.08", y: "60*0.28"},
	{action: "line", x: "100*0.15- 100*0.08", y: "60*0.2"},
	{action: "close"}
]);

/**
 * receive_task
 */
Schema.addGlobalCommand("receive_task", [
	{action: "move", x: "100*0.15+ 100*0.08", y: "60*0.24- 60*0.1"},
	{action: "line", x: "100*0.15- 100*0.08", y: "60*0.24- 60*0.1"},
	{action: "line", x: "100*0.15 - 100*0.08", y: "60*0.24 + 60*0.08"},
	{action: "line", x: "100*0.15+ 100*0.08", y: "60*0.24 + 60*0.08"},
	{action: "line", x: "100*0.15+ 100*0.08", y: "60*0.24- 60*0.1"},
	{action: "close"},
	{action: "line", x: "100*0.15 - 0", y: "60*0.24- 60*0.01"},
	{action: "line", x: "100*0.15 - 100*0.08", y: "60*0.24- 60*0.1"},
	{action: "line", x: "100*0.15 - 0", y: "60*0.24- 60*0.01"},
	{action: "close"}
]);

/**
 * receive_task_dark
 */
Schema.addGlobalCommand("receive_task_dark", [
	{action: "move", x: "100*0.15+ 100*0.08", y: "60*0.24- 60*0.1"},
	{action: "line", x: "100*0.15- 100*0.08", y: "60*0.24- 60*0.1"},
	{action: "line", x: "100*0.15 - 100*0.08", y: "60*0.24 + 60*0.08"},
	{action: "line", x: "100*0.15+ 100*0.08", y: "60*0.24 + 60*0.08"},
	{action: "line", x: "100*0.15+ 100*0.08", y: "60*0.24- 60*0.1"},
	{action: "close"},
	{action: "line", x: "100*0.15 - 0", y: "60*0.24- 60*0.01"},
	{action: "line", x: "100*0.15 - 100*0.08", y: "60*0.24- 60*0.1"},
	{action: "line", x: "100*0.15 - 0", y: "60*0.24- 60*0.01"},
	{action: "close"}
]);

/**
 * service_task
 */
Schema.addGlobalCommand("service_task", [
	{action: "move", x: "100*0.09 -100*0.26 *0.16", y: "60*0.14 + 60/5*8 *0.16 *0.16"},
	{action: "line", x: "100*0.09 -100*0.28 *0.16", y: "60*0.14 + 60/5*8 *0.11 *0.16"},
	{action: "line", x: "100*0.09 - 100*0.26 *0.16", y: "60*0.14 + 60/5*8 *0.05 *0.16"},
	{action: "line", x: "100*0.09 -100*0.17 *0.16", y: "60*0.14 + 60/5*8 *0.05 *0.16"},
	{action: "line", x: "100*0.09 -100*0.12 *0.16", y: "60*0.14 -60/5*8 *0.02 *0.16"},
	{action: "line", x: "100*0.09 -100*0.21 *0.16", y: "60*0.14 -60/5*8 *0.13 *0.16"},
	{action: "line", x: "100*0.09 -100*0.18 *0.16", y: "60*0.14 -60/5*8 *0.17 *0.16"},
	{action: "line", x: "100*0.09 -100*0.13 *0.16", y: "60*0.14 -60/5*8 *0.19 *0.16"},
	{action: "line", x: "100*0.09 -100*0.05 *0.16", y: "60*0.14 -60/5*8 *0.11 *0.16"},
	{action: "line", x: "100*0.09 +100*0.03 *0.16", y: "60*0.14 -60/5*8 *0.15 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.04 *0.16", y: "60*0.14 -60/5*8 *0.25 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.10 *0.16", y: "60*0.14 -60/5*8 *0.27 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.15 *0.16", y: "60*0.14 -60/5*8 *0.25 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.15 *0.16", y: "60*0.14 -60/5*8 *0.15 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.23 *0.16", y: "60*0.14 -60/5*8 *0.12 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.30 *0.16", y: "60*0.14 -60/5*8 *0.19 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.35 *0.16", y: "60*0.14 -60/5*8 *0.16 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.38 *0.16", y: "60*0.14 -60/5*8 *0.12 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.32 *0.16", y: "60*0.14 -60/5*8 *0.05 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.37 *0.16", y: "60*0.14 + 60/5*8 *0.05 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.46 *0.16", y: "60*0.14 + 60/5*8 *0.05 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.48 *0.16", y: "60*0.14 + 60/5*8 *0.10 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.46 *0.16", y: "60*0.14 + 60/5*8 *0.16 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.37 *0.16", y: "60*0.14 + 60/5*8 *0.16 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.33 *0.16", y: "60*0.14 + 60/5*8 *0.25 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.38 *0.16", y: "60*0.14 + 60/5*8 *0.31 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.36 *0.16", y: "60*0.14 + 60/5*8 *0.37 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.29 *0.16", y: "60*0.14 + 60/5*8 *0.39 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.25 *0.16", y: "60*0.14 + 60/5*8 *0.35 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.16 *0.16", y: "60*0.14 + 60/5*8 *0.37 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.16 *0.16", y: "60*0.14 + 60/5*8 *0.46 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.10 *0.16", y: "60*0.14 + 60/5*8 *0.48 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.04 *0.16", y: "60*0.14 + 60/5*8 *0.46 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.04 *0.16", y: "60*0.14 + 60/5*8 *0.37 *0.16"},
	{action: "line", x: "100*0.09 -100*0.04 *0.16", y: "60*0.14 + 60/5*8 *0.33 *0.16"},
	{action: "line", x: "100*0.09 -100*0.12 *0.16", y: "60*0.14 + 60/5*8 *0.38 *0.16"},
	{action: "line", x: "100*0.09 -100*0.18 *0.16", y: "60*0.14 + 60/5*8 *0.37 *0.16"},
	{action: "line", x: "100*0.09 -100*0.21 *0.16", y: "60*0.14 + 60/5*8 *0.33 *0.16"},
	{action: "line", x: "100*0.09 -100*0.14 *0.16", y: "60*0.14 + 60/5*8 *0.25 *0.16"},
	{action: "line", x: "100*0.09 -100*0.16 *0.16", y: "60*0.14 + 60/5*8 *0.16 *0.16"},
	{action: "line", x: "100*0.09 -100*0.26 *0.16", y: "60*0.14 + 60/5*8 *0.16 *0.16"},
	{action: "close"},
	{action: "move", x: "100*0.09 -100*0.01 *0.16", y: "60*0.14 +  60/5*8 *0.01 *0.16"},
	{action: "line", x: "100*0.09 +100*0.01 *0.16", y: "60*0.14 - 60*0.01 /5*8 *0.16"},
	{action: "line", x: "100*0.09 +100*0.04 *0.16", y: "60*0.14 + 60*0.01 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.08 *0.16", y: "60*0.14 + 60*0.01 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.08 *0.16", y: "60*0.14 - 60*0.03 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.12 *0.16", y: "60*0.14 - 60*0.03 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.12 *0.16", y: "60*0.14 - 60*0.0 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.15 *0.16", y: "60*0.14 + 60*0.02 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.18 *0.16", y: "60*0.14 -60*0.01 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.22 *0.16", y: "60*0.14 + 60*0.01 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.18 *0.16", y: "60*0.14 + 60*0.04 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.20 *0.16", y: "60*0.14 + 60*0.08 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.25 *0.16", y: "60*0.14 + 60*0.08 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.25 *0.16", y: "60*0.14 + 60*0.12 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.20 *0.16", y: "60*0.14 + 60*0.12 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.18 *0.16", y: "60*0.14 + 60*0.16 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.21 *0.16", y: "60*0.14 + 60*0.19 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.18 *0.16", y: "60*0.14 + 60*0.22 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.15 *0.16", y: "60*0.14 + 60*0.19 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.12 *0.16", y: "60*0.14 + 60*0.21 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.12 *0.16", y: "60*0.14 + 60*0.25 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.08 *0.16", y: "60*0.14 + 60*0.26 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.08 *0.16", y: "60*0.14 + 60*0.21 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.05 *0.16", y: "60*0.14 + 60*0.18 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.01 *0.16", y: "60*0.14 + 60*0.22 /5*8 *0.16"},
	{action: "line", x: "100*0.09 - 100*0.02 *0.16", y: "60*0.14 + 60*0.19 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.0 *0.16", y: "60*0.14 + 60*0.16 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.0 *0.16", y: "60*0.14 + 60*0.12 /5*8 *0.16"},
	{action: "line", x: "100*0.09 -100*0.04 *0.16", y: "60*0.14 + 60*0.12 /5*8 *0.16"},
	{action: "line", x: "100*0.09 -100*0.04 *0.16", y: "60*0.14 + 60*0.08 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0. *0.16", y: "60*0.14 + 60*0.08 /5*8 *0.16"},
	{action: "line", x: "100*0.09 + 100*0.01 *0.16", y: "60*0.14 + 60*0.05 /5*8 *0.16"},
	{action: "line", x: "100*0.09 -100*0.01 *0.16", y: "60*0.14 + 60*0.01 /5*8 *0.16"},
	{action: "close"},
	{action: "move", x: "100*0.15 -100*0.26 *0.16", y: "60*0.24 + 60/5*8 *0.16 *0.16"},
	{action: "line", x: "100*0.15 -100*0.28 *0.16", y: "60*0.24 + 60/5*8 *0.11 *0.16"},
	{action: "line", x: "100*0.15 -100*0.26 *0.16", y: "60*0.24 + 60/5*8 *0.05 *0.16"},
	{action: "line", x: "100*0.15 -100*0.17 *0.16", y: "60*0.24 + 60/5*8 *0.05 *0.16"},
	{action: "line", x: "100*0.15 -100*0.12 *0.16", y: "60*0.24 -60/5*8 *0.02 *0.16"},
	{action: "line", x: "100*0.15 -100*0.21 *0.16", y: "60*0.24 -60/5*8 *0.13 *0.16"},
	{action: "line", x: "100*0.15 -100*0.18 *0.16", y: "60*0.24 -60/5*8 *0.17 *0.16"},
	{action: "line", x: "100*0.15 -100*0.13 *0.16", y: "60*0.24 -60/5*8 *0.19 *0.16"},
	{action: "line", x: "100*0.15 -100*0.05 *0.16", y: "60*0.24 -60/5*8 *0.11 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.03 *0.16", y: "60*0.24 -60/5*8 *0.15 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.04 *0.16", y: "60*0.24 -60/5*8 *0.25 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.10 *0.16", y: "60*0.24 -60/5*8 *0.27 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.15 *0.16", y: "60*0.24 -60/5*8 *0.25 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.15 *0.16", y: "60*0.24 -60/5*8 *0.15 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.23 *0.16", y: "60*0.24 -60/5*8 *0.12 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.30 *0.16", y: "60*0.24 -60/5*8 *0.19 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.35 *0.16", y: "60*0.24 -60/5*8 *0.16 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.38 *0.16", y: "60*0.24 -60/5*8 *0.12 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.32 *0.16", y: "60*0.24 -60/5*8 *0.05 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.37 *0.16", y: "60*0.24 +60/5*8 *0.05 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.46 *0.16", y: "60*0.24 +60/5*8 *0.05 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.48 *0.16", y: "60*0.24 +60/5*8 *0.10 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.46 *0.16", y: "60*0.24 +60/5*8 *0.16 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.37 *0.16", y: "60*0.24 +60/5*8 *0.16 *0.16"},
	{action: "line", x: "100*0.15 +  100*0.33 *0.16", y: "60*0.24 +60/5*8 *0.25 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.38 *0.16", y: "60*0.24 +60/5*8 *0.31 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.36 *0.16", y: "60*0.24 +60/5*8 *0.37 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.29 *0.16", y: "60*0.24 +60/5*8 *0.39 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.25 *0.16", y: "60*0.24 +60/5*8 *0.35 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.16 *0.16", y: "60*0.24 +60/5*8 *0.37 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.16 *0.16", y: "60*0.24 +60/5*8 *0.46 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.10 *0.16", y: "60*0.24 +60/5*8 *0.48 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.04 *0.16", y: "60*0.24 +60/5*8 *0.46 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.04 *0.16", y: "60*0.24 +60/5*8 *0.37 *0.16"},
	{action: "line", x: "100*0.15 -100*0.04 *0.16", y: "60*0.24 +60/5*8 *0.33 *0.16"},
	{action: "line", x: "100*0.15 -100*0.12 *0.16", y: "60*0.24 +60/5*8 *0.38 *0.16"},
	{action: "line", x: "100*0.15 -100*0.18 *0.16", y: "60*0.24 +60/5*8 *0.37 *0.16"},
	{action: "line", x: "100*0.15 -100*0.21 *0.16", y: "60*0.24 +60/5*8 *0.33 *0.16"},
	{action: "line", x: "100*0.15 -100*0.14 *0.16", y: "60*0.24 +60/5*8 *0.25 *0.16"},
	{action: "line", x: "100*0.15 -100*0.16 *0.16", y: "60*0.24 +60/5*8 *0.16 *0.16"},
	{action: "line", x: "100*0.15 -100*0.26 *0.16", y: "60*0.24 +60/5*8 *0.16 *0.16"},
	{action: "close"},
	{action: "move", x: "100*0.15 -100*0.01 *0.16", y: "60*0.24 +60/5*8 *0.01 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.01 *0.16", y: "60*0.24 - 60*0.01 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.04 *0.16", y: "60*0.24 + 60*0.01 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.08 *0.16", y: "60*0.24 + 60*0.01 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.08 *0.16", y: "60*0.24 - 60*0.03 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.12 *0.16", y: "60*0.24 - 60*0.03 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.12 *0.16", y: "60*0.24 - 60*0.0 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.15 *0.16", y: "60*0.24 + 60*0.02 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.18 *0.16", y: "60*0.24 -60*0.01 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.22 *0.16", y: "60*0.24 + 60*0.01 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.18 *0.16", y: "60*0.24 + 60*0.04 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.20 *0.16", y: "60*0.24 + 60*0.08 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.25 *0.16", y: "60*0.24 + 60*0.08 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.25 *0.16", y: "60*0.24 + 60*0.12 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.20 *0.16", y: "60*0.24 + 60*0.12 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.18 *0.16", y: "60*0.24 + 60*0.16 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.21 *0.16", y: "60*0.24 + 60*0.19 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.18 *0.16", y: "60*0.24 + 60*0.22 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.15 *0.16", y: "60*0.24 + 60*0.19 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.12 *0.16", y: "60*0.24 + 60*0.21 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.12 *0.16", y: "60*0.24 + 60*0.25 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.08 *0.16", y: "60*0.24 + 60*0.26 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.08 *0.16", y: "60*0.24 + 60*0.21 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.05 *0.16", y: "60*0.24 + 60*0.18 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.01 *0.16", y: "60*0.24 + 60*0.22 /5*8 *0.16"},
	{action: "line", x: "100*0.15 - 100*0.02 *0.16", y: "60*0.24 + 60*0.19 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.0 *0.16", y: "60*0.24 + 60*0.16 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.0 *0.16", y: "60*0.24 + 60*0.12 /5*8 *0.16"},
	{action: "line", x: "100*0.15 -100*0.04 *0.16", y: "60*0.24 + 60*0.12 /5*8 *0.16"},
	{action: "line", x: "100*0.15 -100*0.04 *0.16", y: "60*0.24 + 60*0.08 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0 *0.16", y: "60*0.24 + 60*0.08 /5*8 *0.16"},
	{action: "line", x: "100*0.15 + 100*0.01 *0.16", y: "60*0.24 + 60*0.05 /5*8 *0.16"},
	{action: "line", x: "100*0.15 -100*0.01 *0.16", y: "60*0.24 + 60*0.01 /5*8 *0.16"},
	{action: "close"}
]);

/**
 * script_task
 */
Schema.addGlobalCommand("script_task", [
	{action: "move", x: "100*0.15- 100*0.05", y: "60*0.24- 60*0.1"},
	{action: "line", x: "100*0.15 + 100*0.05", y: "60*0.24 - 60*0.1"},
	{action: "curve", x1: "100*0.15 + 100*0.02", y1: "60*0.24 - 60*0.1", x2: "100*0.15 + 100*0.02", y2: "60*0.24", x: "100*0.15 + 100*0.04", y: "60*0.24"},
	{action: "curve", x1: "100*0.15 + 100*0.06", y1: "60*0.24", x2: "100*0.15 + 100*0.06", y2: "60*0.24 + 60*0.1", x: "100*0.15 + 100*0.03", y: "60*0.24 + 60*0.1"},
	{action: "line", x: "100*0.15 - 100*0.08", y: "60*0.24 + 60*0.1"},
	{action: "curve", x1: "100*0.15 - 100*0.05", y1: "60*0.24 + 60*0.1", x2: "100*0.15 - 100*0.05", y2: "60*0.24", x: "100*0.15 - 100*0.07", y: "60*0.24"},
	{action: "curve", x1: "100*0.15 - 100*0.09", y1: "60*0.24", x2: "100*0.15 - 100*0.09", y2: "60*0.24 - 60*0.1", x: "100*0.15 - 100*0.05", y: "60*0.24 - 60*0.1"},
	{action: "close"},
	
	{action: "move", x: "100*0.15 - 100*0.08", y: "60*0.24 - 60*0.05"},
	{action: "line", x: "100*0.15 + 100*0.025", y: "60*0.24 - 60*0.05"},
	{action: "move", x: "100*0.15 - 100*0.07", y: "60*0.24 - 0"},
	{action: "line", x: "100*0.15 + 100*0.04", y: "60*0.24 - 0"},
	{action: "move", x: "100*0.15 - 100*0.055", y: "60*0.24 + 60*0.06"},
	{action: "line", x: "100*0.15 + 100*0.05", y: "60*0.24 + 60*0.06"}
]);

/**
 * business_rule
 */
Schema.addGlobalCommand("business_rule", [
	{action: "move", x: "100*0.15- 100*0.08", y: "60*0.24- 60*0.1"},
	{action: "line", x: "100*0.15 + 100*0.08", y: "60*0.24- 60*0.1"},
	{action: "line", x: "100*0.15 + 100*0.08", y: "60*0.24 + 60*0.1"},
	{action: "line", x: "100*0.15 - 100*0.08", y: "60*0.24 + 60*0.1"},
	{action: "close"},
	{action: "move", x: "100*0.15 - 100*0.08", y: "60*0.24 - 60*0.05"},
	{action: "line", x: "100*0.15 + 100*0.08", y: "60*0.24 - 60*0.05"},
	{action: "move", x: "100*0.15 - 100*0.08", y: "60*0.24 + 60*0.0"},
	{action: "line", x: "100*0.15 + 100*0.08", y: "60*0.24 + 60*0.0"},
	{action: "move", x: "100*0.15 - 100*0.08", y: "60*0.24 + 60*0.05"},
	{action: "line", x: "100*0.15 + 100*0.08", y: "60*0.24 + 60*0.05"},
	{action: "move", x: "100*0.15 - 100*0.04", y: "60*0.24 - 60*0.1"},
	{action: "line", x: "100*0.15 - 100*0.04", y: "60*0.24 + 60*0.1"}
]);

/**
 * user_task
 */
Schema.addGlobalCommand("user_task", [
	{action: "move", x: "100*0.05+ 100/11*2*0.5-100/11*2*0.2", y: "60*0.1+ 60/55*16*0.3"},
	{action: "curve", x1: "100*0.05+ 100/11*2*0.30", y1: "60*0.1+ 60/55*16*0.3 - 60/55*16*0.4*2/3", x2: "100*0.05+ 100/11*2*0.5+100/11*2*0.2", y2: "60*0.1+ 60/55*16*0.3 - 60/55*16*0.4*2/3", x: "100*0.05+ 100/11*2*0.5+100/11*2*0.2", y: "60*0.1+ 60/55*16*0.3"},
	{action: "line", x: "100*0.05+ 100/11*2*0.5-100/11*2*0.2", y: "60*0.1+ 60/55*16*0.3"},
	{action: "close"},
	
	{action: "move", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.1", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.1", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.68"},
	{action: "quadraticCurve", x1: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.1", y1: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.58"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.60", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.58"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.60", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45"},
	{action: "quadraticCurve", x1: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.95", y1: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.95", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.68"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.95", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.77", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.77", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.77"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.77", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.23", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.23", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.77"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.23", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.05", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"},
	{action: "close"},
	
	{action: "move", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.38", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.42"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.40"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.32", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.35"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.32", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.27"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.43", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.27"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.46", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.24"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.68", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.24"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.68", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.35"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.60", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.40"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.62", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.42"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.60", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.60", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.58"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.58"},
	{action: "line", x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35", y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45"},
	{action: "close"}
]);

/**
 * inner_roundRectangle
 */
Schema.addGlobalCommand("inner_roundRectangle", [
	{action: "move", x: "w * 0 +3", y: "h * 0 + h/30 +3"},
	{action: "quadraticCurve", x1: "w * 0 +3 +1", y1: "h * 0 +3 +1", x: "w * 0 + h/30 +3", y: "h * 0  +3"},
	{action: "line", x: "w * 1 - h/30 -3", y: "h * 0 +3"},
	{action: "quadraticCurve", x1: "w * 1 -3", y1: "h * 0+3", x: "w * 1  -3", y: "h * 0 + h/30 +3"},
	{action: "line", x: "w * 1 -3", y: "h * 1 - h/30-3"},
	{action: "quadraticCurve", x1: "w * 1 -3", y1: "h * 1 -3", x: "w * 1 - h/30-3", y: "h * 1 -3"},
	{action: "line", x: "w * 0 + h/30 +3", y: "h * 1 -3"},
	{action: "quadraticCurve", x1: "w * 0+3", y1: "h * 1-3", x: "w * 0 +3", y: "h * 1 - h/30 -3"},
	{action: "line", x: "w * 0 + 3", y: "h * 0 + h/30+3"},
	{action: "close"}
]);

/**
 * exclusive_gateway
 */
Schema.addGlobalCommand("exclusive_gateway", [
	{action: "move", x: "w*0.5", y: "h*0.5"},
	{action: "move", x: "w*0.5 - w*0.5*0.4 + w*0.02", y: "h*0.5 - h*0.5*0.4 - h*0.02"},
	{action: "line", x: "w*0.5 + w*0.5*0.4 + w*0.02", y: "h*0.5 + h*0.5*0.4 - h*0.02"},
	{action: "line", x: "w*0.5 + w*0.5*0.4 - w*0.02", y: "h*0.5 + h*0.5*0.4 + h*0.02"},
	{action: "line", x: "w*0.5 - w*0.5*0.4 - w*0.02", y: "h*0.5 - h*0.5*0.4 + h*0.02"},
	{action: "close"},
	{action: "move", x: "w*0.5 + w*0.5*0.4 - w*0.02", y: "h*0.5 - h*0.5*0.4 - h*0.02"},
	{action: "line", x: "w*0.5 - w*0.5*0.4 - w*0.02", y: "h*0.5 + h*0.5*0.4 - h*0.02"},
	{action: "line", x: "w*0.5 - w*0.5*0.4 + w*0.02", y: "h*0.5 + h*0.5*0.4 + h*0.02"},
	{action: "line", x: "w*0.5 + w*0.5*0.4 + w*0.02", y: "h*0.5 - h*0.5*0.4 + h*0.02"},
	{action: "line", x: "w*0.5 + w*0.5*0.4 - w*0.02", y: "h*0.5 - h*0.5*0.4 - h*0.02"},
	{action: "close"}
]);

/**
 * complex_gateway
 */
Schema.addGlobalCommand("complex_gateway0", [
	{action: "move", x: "w*0.5 - Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02", y: "h*0.5 - Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02", y: "h*0.5 + Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.03"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02", y: "h*0.5 + Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02", y: "h*0.5 - Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02"},
	{action: "close"}
]);
Schema.addGlobalCommand("complex_gateway1", [
	{action: "move", x: "w*0.5 + Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02", y: "h*0.5 - Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02", y: "h*0.5 + Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02", y: "h*0.5 + Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02", y: "h*0.5 - Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02", y: "h*0.5 - Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02"},
	{action: "close"}
]);
Schema.addGlobalCommand("complex_gateway2", [
	{action: "move", x: "w*0.5 - Math.min(w,h)*0.027", y: "h*0.5 - Math.min(w,h)*0.5*0.4"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.027", y: "h*0.5 + Math.min(w,h)*0.5*0.4"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.027", y: "h*0.5 + Math.min(w,h)*0.5*0.4"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.027", y: "h*0.5 - Math.min(w,h)*0.5*0.4"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.027", y: "h*0.5 - Math.min(w,h)*0.5*0.4"},
	{action: "close"}
]);
Schema.addGlobalCommand("complex_gateway3", [
	{action: "move", x: "w*0.5 - Math.min(w,h)*0.5*0.4", y: "h*0.5 - Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.5*0.4", y: "h*0.5 + Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.5*0.4", y: "h*0.5 + Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.5*0.4", y: "h*0.5 - Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.5*0.4", y: "h*0.5 - Math.min(w,h)*0.027"},
	{action: "close"}
]);

/**
 * event_based_gateway
 */
Schema.addGlobalCommand("event_based_gateway", [
	{action: "move", x: "w*0.5 - w*0.5/55*32", y: "h*0.5"},
	{action: "curve", x1: "w*0.5 - w*0.5/55*32", y1: "h*0.5 - h/55*32*2/3", x2: "w*0.5 + w*0.5/55*32", y2: "h*0.5 - h/55*32*2/3", x: "w*0.5 + w*0.5/55*32", y: "h*0.5"},
	{action: "curve", x1: "w*0.5 + w*0.5/55*32", y1: "h*0.5 + h/55*32*2/3", x2: "w*0.5 - w*0.5/55*32", y2: "h*0.5 + h/55*32*2/3", x: "w*0.5 - w*0.5/55*32", y: "h*0.5"},
	{action: "close"},
	{action: "move", x: "w*0.5 - w*0.4/55*32", y: "h*0.5"},
	{action: "curve", x1: "w*0.5 - w*0.4/55*32", y1: "h*0.5 - h/55*32*2/3*0.8", x2: "w*0.5+w*0.4/55*32", y2: "h*0.5 - h/55*32*2/3*0.8", x: "w*0.5 + w*0.4/55*32", y: "h*0.5"},
	{action: "curve", x1: "w*0.5 + w*0.4/55*32", y1: "h*0.5 + h/55*32*2/3*0.8", x2: "w*0.5 - w*0.4/55*32", y2: "h*0.5 + h/55*32*2/3*0.8", x: "w*0.5 - w*0.4/55*32", y: "h*0.5"},
	{action: "close"},
	{action: "move", x: "w*0.5", y: "h*0.5 - h/55*32*0.28"},
	{action: "line", x: "w*0.5+ w/55*32*0.28", y: "h*0.5- h/55*32*0.08"},
	{action: "line", x: "w*0.5+ w/55*32*0.17", y: "h*0.5+h/55*32*0.25"},
	{action: "line", x: "w*0.5- w/55*32*0.17", y: "h*0.5+ h/55*32*0.25"},
	{action: "line", x: "w*0.5- w/55*32*0.28", y: "h*0.5-h/55*32*0.08"},
	{action: "line", x: "w*0.5", y: "h*0.5-h/55*32*0.28"},
	{action: "close"}
]);

/**
 * event_based_start_gateway
 */
Schema.addGlobalCommand("event_based_start_gateway", [
	{action: "move", x: "w*0.5 - w*0.5/55*32", y: "h*0.5"},
	{action: "curve", x1: "w*0.5 - w*0.5/55*32", y1: "h*0.5 - h/55*32*2/3", x2: "w*0.5 + w*0.5/55*32", y2: "h*0.5 - h/55*32*2/3", x: "w*0.5 + w*0.5/55*32", y: "h*0.5"},
	{action: "curve", x1: "w*0.5 + w*0.5/55*32", y1: "h*0.5 + h/55*32*2/3", x2: "w*0.5 - w*0.5/55*32", y2: "h*0.5 + h/55*32*2/3", x: "w*0.5 - w*0.5/55*32", y: "h*0.5"},
	{action: "close"},
	{action: "move", x: "w*0.5", y: "h*0.5 - h/55*32*0.28"},
	{action: "line", x: "w*0.5+ w/55*32*0.28", y: "h*0.5- h/55*32*0.08"},
	{action: "line", x: "w*0.5+ w/55*32*0.17", y: "h*0.5+h/55*32*0.25"},
	{action: "line", x: "w*0.5- w/55*32*0.17", y: "h*0.5+ h/55*32*0.25"},
	{action: "line", x: "w*0.5- w/55*32*0.28", y: "h*0.5-h/55*32*0.08"},
	{action: "line", x: "w*0.5", y: "h*0.5-h/55*32*0.28"},
	{action: "close"}
]);

/**
 * parallel_gateway
 */
Schema.addGlobalCommand("parallel_gateway", [
	{action: "move", x: "w*0.5 - Math.min(w,h)*0.04", y: "h*0.5 - h*0.5*0.5"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.04", y: "h*0.5 + h*0.5*0.5"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.04", y: "h*0.5 + h*0.5*0.5"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.04", y: "h*0.5 - h*0.5*0.5"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.04", y: "h*0.5 - h*0.5*0.5"},
	{action: "close"},
	{action: "move", x: "w*0.5 - w*0.5*0.5", y: "h*0.5 - Math.min(w,h)*0.04"},
	{action: "line", x: "w*0.5 - w*0.5*0.5", y: "h*0.5 + Math.min(w,h)*0.04"},
	{action: "line", x: "w*0.5 + w*0.5*0.5", y: "h*0.5 + Math.min(w,h)*0.04"},
	{action: "line", x: "w*0.5 + w*0.5*0.5", y: "h*0.5 - Math.min(w,h)*0.04"},
	{action: "line", x: "w*0.5 - w*0.5*0.5", y: "h*0.5 - Math.min(w,h)*0.04"},
	{action: "close"}
]);

/**
 * parallel_eventbased_gateway
 */
Schema.addGlobalCommand("parallel_eventbased_gateway", [
	{action: "move", x: "w*0.5 - Math.min(w,h)*0.027", y: "h*0.5 - Math.min(w,h)*0.5*0.4"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.027", y: "h*0.5 - Math.min(w,h)*0.02"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.5*0.4", y: "h*0.5 - Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.5*0.4", y: "h*0.5 + Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.027", y: "h*0.5 + Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.027", y: "h*0.5 + Math.min(w,h)*0.5*0.4"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.027", y: "h*0.5 + Math.min(w,h)*0.5*0.4"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.027", y: "h*0.5 + Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.5*0.4", y: "h*0.5 + Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.5*0.4", y: "h*0.5 - Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.027", y: "h*0.5 - Math.min(w,h)*0.027"},
	{action: "line", x: "w*0.5 + Math.min(w,h)*0.027", y: "h*0.5 - Math.min(w,h)*0.5*0.4"},
	{action: "line", x: "w*0.5 - Math.min(w,h)*0.027", y: "h*0.5 - Math.min(w,h)*0.5*0.4"},
	{action: "close"}
]);

/**
 * data_in_object
 */
Schema.addGlobalCommand("data_in_object", [
	{action: "move", x: "w/3/4", y: "h/4/3+3"},
	{action: "line", x: "w/3/4*3.5", y: "h/4/3+3"},
	{action: "line", x: "w/3/4*3.5", y: "h/4/3-h/4/5+3"},
	{action: "line", x: "w/3/4*5", y: "h/4/2+3"},
	{action: "line", x: "w/3/4*3.5", y: "h/4/2+h/4/2-h/4/3+h/4/5+3"},
	{action: "line", x: "w/3/4*3.5", y: "h/4/2+h/4/2-h/4/3+3"},
	{action: "line", x: "w/3/4", y: "h/4/2+h/4/2-h/4/3+3"},
	{action: "line", x: "w/3/4", y: "h/4/3+3"},
	{action: "close"}
]);

/**
 * choreography_task
 */
Schema.addGlobalCommand("choreography_task", [
	{action: "move", x: "0", y: "6"},
	{action: "quadraticCurve", x1: "0", y1: "0", x: "6", y: "0"},
	{action: "line", x: "w-6", y: "0"},
	{action: "quadraticCurve", x1: "w", y1: "0", x: "w", y: "6"},
	{action: "line", x: "w", y: "h-6"},
	{action: "quadraticCurve", x1: "w", y1: "h", x: "w-6", y: "h"},
	{action: "line", x: "6", y: "h"},
	{action: "quadraticCurve", x1: "0", y1: "h", x: "0", y: "h-6"},
	{action: "line", x: "0", y: "6"},
	{action: "close"}
]);



// BPMN  shape***************************************************************************************

/**
 * StartEvent
 */
Schema.addShape({
	name: "startEvent",
	title: "<@i18n resource='schema.bpmn.start'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 * IME
 */
Schema.addShape({
	name: "intermediateEvent",
	title: "<@i18n resource='schema.bpmn.imeevent'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		}
	]
});
/**
 * BoundaryEvent
 */
Schema.addShape({
	name: "boundaryEvent",
	title: "<@i18n resource='schema.bpmn.boundary.event'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
	       {
	    	   lineStyle: {
	    		   lineStyle: "solid"
	    	   },
	    	   actions: {ref: "round"}
	       },
	       {
	    	   lineStyle: {
	    		   lineStyle: "solid"
	    	   },
	    	   actions: {ref: "inneround"}
	       }
	       ]
});

/**
 * EndEvent
 */
Schema.addShape({
	name: "endEvent",
	title: "<@i18n resource='schema.bpmn.end'/>",
	category: "bpmn",
	groupName: "endEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: "lineWidth + 2",
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *BPMNTask 
 */
Schema.addShape({
	name: "task",
	title: "<@i18n resource='schema.bpmn.task'/>",
	category: "bpmn",
	groupName: "task",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.resources'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.default'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.iospecification'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.datainputassociations'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.dataoutputassociations'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 * CallActivity
 */
Schema.addShape({
	name: "callActivity",
	title: "<@i18n resource='schema.bpmn.callactivity'/>",
	category: "bpmn",
	groupName: "callActivity",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.calledelement'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.iospecification'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.datainputassociations'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.dataoutputassociations'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {lineWidth: "lineWidth + 2"},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 * BPMNSubProcess
 */
Schema.addShape({
	name: "subProcess",
	title: "<@i18n resource='schema.bpmn.subprocess'/>",
	text: "",
	category: "bpmn",
	groupName: "subProcess",
	attribute: {
		container: true,
		collapsable: true,
		collapsed: false,
		rotatable: false
	},
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.resources'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.startquantity'/>", type:"number", value:"1", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.completionquantity'/>", type:"number", value:"1", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.default'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.iospecification'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.datainputassociations'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.dataoutputassociations'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 400,
		h: 280
	},
	path: [
		{
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 * BPMNGateway
 */
Schema.addShape({
	name: "bpmnGateway",
	title: "<@i18n resource='schema.bpmn.gateway'/>",
	category: "bpmn",
	groupName: "bpmnGateway",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.gatewaydirection'/>", type:"list", value:"", category: "default",listItems:["<@i18n resource='schema.diagram.biz.gatewaydirection.unspecified'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.converging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.diverging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.mixed'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.default'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 50,
		h: 50
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			actions: {ref: "gateway0"}
		}
	]
});

/**
 * BPMNDataObject
 */
Schema.addShape({
	name: "dataObject",
	title: "<@i18n resource='schema.bpmn.dataobject'/>",
	category: "bpmn",
	groupName: "dataObject",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.iscollection'/>", type:"boolean", value:"false", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.itemsubjectref'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 70,
		h: 90
	},
	path: [
		{
			actions: [
				{action: "move", x: "0", y: "0"},
				{action: "line", x: "0", y: "h"},
				{action: "line", x: "w", y: "h"},
				{action: "line", x: "w", y: "h*0.25"},
				{action: "line", x: "w*2/3", y: "0"},
				{action: "line", x: "0", y: "0"},
				{action: "close"}
			]
		},
		{
			actions: [
				{action: "move", x: "w*2/3", y: "0"},
				{action: "line", x: "w*2/3", y: "h*0.25"},
				{action: "line", x: "w", y: "h*0.25"}
			]
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {type: "none"},
			actions: {ref: "rectangle"}
		}
	]
});

/**
 * BPMNAnnotation
 */
Schema.addShape({
	name: "textAnnotation",
	title: "<@i18n resource='schema.bpmn.annotation'/>",
	category: "bpmn",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.text'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	anchors: [{x: "0", y: "h*0.5"}, {x: "0", y: "h*0.5"}, {x: "0", y: "h*0.5"}, {x: "0", y: "h*0.5"}],
	path: [
	    {
			fillStyle: {type: "none"},
			lineStyle: {
				lineWidth: 0
			},
			actions: {ref: "rectangle"}
		},
		{
			fillStyle: {type: "none"},
			actions: [
				{action: "move", x: "Math.min(w/6, 20)", y: "0"},
				{action: "line", x: "0", y: "0"},
				{action: "line", x: "0", y: "h"},
				{action: "line", x: "Math.min(w/6, 20)", y: "h"}
			]
		},
		{
			fillStyle: {type: "none"},
			lineStyle: {
				lineWidth: 0
			},
			actions: {ref: "rectangle"}
		}
	]
});

/**
 * BPMNGroup
 */
Schema.addShape({
	name: "group",
	title: "<@i18n resource='schema.bpmn.group'/>",
	category: "bpmn",
	attribute: {
		container: true
	},
	props: {
		w: 200,
		h: 140
	},
	lineStyle: {
		lineWidth: 2,
		lineStyle: "dashed"
	},
	path: [
		{
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 *DataStore 
 */
Schema.addShape({
	name: "dataStore",
	title: "<@i18n resource='schema.bpmn.datastore'/>",
	category: "bpmn",
	props: {
		w: 70,
		h: 70
	},
	textBlock: [{position: {x: "0", y: "h/3", w: "w", h: "h*2/3"}}],
	path: [
		{
			actions: [
				{action: "move", x: "0", y: "h*0.14"},
				{action: "curve", x1: "0", y1: "-h*0.04", x2: "w", y2: "-h*0.04", x: "w", y: "h*0.14"},
				{action: "line", x: "w", y: "h*0.86"},
				{action: "curve", x1: "w", y1: "h*1.04", x2: "0", y2: "h*1.04", x: "0", y: "h*0.86"},
				{action: "line", x: "0", y: "h*0.14"},
				{action: "close"}
			]
		},
		{
			actions: [
			    {action: "move", x: "w", y: "h*0.14"},
				{action: "curve", x1: "w", y1: "h*0.3", x2: "0", y2: "h*0.3", x: "0", y: "h*0.14"},
				{action: "line", x: "0", y: "h*0.20"},
				{action: "curve", x1: "0", y1: "h*0.36", x2: "w", y2: "h*0.36", x: "w", y: "h*0.20"},
				{action: "line", x: "w", y: "h*0.26"},
				{action: "curve", x1: "w", y1: "h*0.42", x2: "0", y2: "h*0.42", x: "0", y: "h*0.26"},
				{action: "curve", x1: "0", y1: "h*0.42", x2: "w", y2: "h*0.42", x: "w", y: "h*0.26"},
				{action: "close"}      
			]
		},
		{
			fillStyle: {type: "none"},
			lineStyle: {
				lineWidth: 0
			},
			actions: [
				{action: "move", x: "0", y: "h*0.1"},
				{action: "quadraticCurve", x1: "w*0.5", y1: "-h*0.1", x: "w", y: "h*0.1"},
				{action: "line", x: "w", y: "h*0.9"},
				{action: "quadraticCurve", x1: "w*0.5", y1: "h*1.1", x: "0", y: "h*0.9"},
				{action: "line", x: "0", y: "h*0.1"},
				{action: "close"}
			]
		}
	]
});

/**
 * BPMNConversation
 */
Schema.addShape({
	name: "conversation",
	title: "<@i18n resource='schema.bpmn.conversation'/>",
	category: "bpmn",
	groupName: "conversation",
	props: {
		w: 45,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			actions: [
				{action: "move", x: "Math.min(w,h)*0.21", y: "0"},
				{action: "line", x: "w-Math.min(w,h)*0.21", y: "0"},
				{action: "line", x: "w", y: "h*0.5"},
				{action: "line", x: "w-Math.min(w,h)*0.21", y: "h"},
				{action: "line", x: "Math.min(w,h)*0.21", y: "h"},
				{action: "line", x: "0", y: "h*0.5"},
				{action: "line", x: "Math.min(w,h)*0.21", y: "0"},
				{action: "close"}
			]
		}
	]
});

/**
 * 绘制Choreography的图标
 * @param {} w
 * @param {} h
 * @param {} bold
 * @return {}
 */
function drawChoreographyIcon(w, h, bold){
	var paths = [
		{
			actions: [
				{action: "move", x: 0, y: 4},
				{action: "quadraticCurve", x1: 0, y1: 0, x: 4, y: 0},
				{action: "line", x: w-4, y: 0},
				{action: "quadraticCurve", x1: w, y1: 0, x: w, y: 4},
				{action: "line", x: w, y: h-4},
				{action: "quadraticCurve", x1: w, y1: h, x: w-4, y: h},
				{action: "line", x: 4, y: h},
				{action: "quadraticCurve", x1: 0, y1: h, x: 0, y: h-4},
				{action: "line", x: 0, y: 4},
				{action: "close"}
			]
		},{
			actions: [
				{action: "move", x: 0, y: 4},
				{action: "quadraticCurve", x1: 0, y1: 0, x: 4, y: 0},
				{action: "line", x: w-4, y: 0},
				{action: "quadraticCurve", x1: w, y1: 0, x: w, y: 4},
				{action: "line", x: w, y: 5},
				{action: "line", x: 0, y: 5},
				{action: "line", x: 0, y: 4},
				{action: "close"}
			]
		},{
			fillStyle: {color: "194,194,194"},
			actions: [
				{action: "move", x: 0, y: h-5},
				{action: "line", x: w, y: h-5},
				{action: "line", x: w, y: h-4},
				{action: "quadraticCurve", x1: w, y1: h, x: w-4, y: h},
				{action: "line", x: 4, y: h},
				{action: "quadraticCurve", x1: 0, y1: h, x: 0, y: h-4},
				{action: "close"}
			]
		}
	];
	if(bold){
		for (var i = 0; i < paths.length; i++) {
			var path = paths[i];
			path.lineStyle = {lineWidth: 3};
		}
	}
	return paths;
}

/**
 * ChoreographyTask
 */
Schema.addShape({
	name: "choreographyTask",
	title: "<@i18n resource='schema.bpmn.choreography'/>",
	category: "bpmn",
	groupName: "choreographyTask",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.looptype'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.looptype.standard'/>","<@i18n resource='schema.diagram.biz.looptype.multilnstancesequential'/>","<@i18n resource='schema.diagram.biz.looptype.multilnstanceparallel'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.initiatingparticipantref'/>", type:"string", value:"", category: "default"}
	],
	attribute: {
		markerOffset: 30
	},
	props: {
		w: 120,
		h: 120
	},
	textBlock: [
		{
			position: {x: 5, y: "30", w: "w-10", h: "h-60"},
			text: "<@i18n resource='schema.bpmn.choreography'/>"
		},
		{
			position: {x: 5, y: 0, w: "w-10", h: 25},
			text: "<@i18n resource='schema.bpmn.choreography.participanta'/>"
		},
		{
			position: {x: 5, y: "h-25", w: "w-10", h: 25},
			text: "<@i18n resource='schema.bpmn.choreography.participantb'/>"
		}
	],
	path: [
		{
			lineStyle: {lineWidth: 0},
			actions: {ref: "choreography_task"}
		},{
			fillStyle: {type: "solid", color: "r-50,g-50,b-50"},
			lineStyle: {lineWidth: 0},
			actions: [
				{action: "move", x: 0, y: "h-25"},
				{action: "line", x: "w", y: "h-25"},
				{action: "line", x: "w", y: "h-6"},
				{action: "quadraticCurve", x1: "w", y1: "h", x: "w-6", y: "h"},
				{action: "line", x: "6", y: "h"},
				{action: "quadraticCurve", x1: "0", y1: "h", x: "0", y: "h-6"},
				{action: "close"}
			]
		},{
			fileStyle: {type: "none"},
			actions: [
				{action: "move", x: 0, y: 25},
				{action: "line", x: "w", y: 25}
			]
		},{
			fileStyle: {type: "none"},
			actions: [
				{action: "move", x: 0, y: "h-25"},
				{action: "line", x: "w", y: "h-25"}
			]
		},{
			fillStyle: {type: "none"},
			actions: {ref: "choreography_task"}
		}
	],
	drawIcon: function(w, h){
		return drawChoreographyIcon(w, h, false);
	}
});

/**
 * Message
 */
Schema.addShape({
	name: "message",
	title: "<@i18n resource='schema.bpmn.message'/>",
	category: "bpmn",
	props: {
		w: 60,
		h: 40
	},
	path: [
		{
			actions: {ref: "rectangle"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: [
				{action: "move", x: "0", y: "0"},
				{action: "line", x: "w*0.5", y: "h*0.5"},
				{action: "move", x: "w", y: "0"},
				{action: "line", x: "w*0.5", y: "h*0.5"}
			]
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "rectangle"}
		}
	]
});



///BPMN--children **********************************************************************************************


/**
 * StartEvent-children*****************************
 */
Schema.addShape({
	name: "messageStartEvent",
	title: "<@i18n resource='schema.bpmn.start.msg'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "message0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *TimerEvent0 
 */
Schema.addShape({
	name: "timerStartEvent",
	title: "<@i18n resource='schema.bpmn.start.timer'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "timer0"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineStyle: "solid"
			},
			actions: {ref: "timer0_needle"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "timer0_num"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *conditionalEvent0
 */
Schema.addShape({
	name: "conditionalStartEvent",
	title: "<@i18n resource='schema.bpmn.start.conditional'/>",
	category: "bpmn",
	groupName: "startEvent",
	dataAttributes: [
		{name: "<@i18n resource='schema.diagram.biz.condition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "conditional0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 * SignalEvent0
 */
Schema.addShape({
	name: "signalStartEvent",
	title: "<@i18n resource='schema.bpmn.start.signal'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "signal0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 * escalationEvent0
 */
Schema.addShape({
	name: "escalationStartEvent",
	title: "<@i18n resource='schema.bpmn.start.escalation'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "escalation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *CompensationEvent0
 */
Schema.addShape({
	name: "compensationStartEvent",
	title: "<@i18n resource='schema.bpmn.start.compensation'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "compensation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ErrorEvent0
 */
Schema.addShape({
	name: "errorStartEvent",
	title: "<@i18n resource='schema.bpmn.start.error'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "error0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *MultipleEvent0
 */
Schema.addShape({
	name: "multipleStartEvent",
	title: "<@i18n resource='schema.bpmn.start.multi'/>",
	category: "bpmn",
	groupName: "startEvent",
	dataAttributes: [
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "multiple0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});
/**
 *ParallelEvent0
 */
Schema.addShape({
	name: "parallelStartEvent",
	title: "<@i18n resource='schema.bpmn.start.parallel'/>",
	category: "bpmn",
	groupName: "startEvent",
	dataAttributes: [
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "parallel0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *MessageEvent2
 */
Schema.addShape({
	name: "messageNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.start.noninturrmsg'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
	       {
	    	   lineStyle: {
	    		   lineWidth: 2,
	    		   lineStyle: "dashed"
	    	   },
	    	   actions: {ref: "round"}
	       },
	       {
	    	   lineStyle: {
	    		   lineStyle: "solid"
	    	   },
	    	   actions: {ref: "message0"}
	       },
	       {
	    	   lineStyle: {
	    		   lineWidth: 0
	    	   },
	    	   fillStyle: {
	    		   type: "none"
	    	   },
	    	   actions: {ref: "round"}
	       }
	       ]
});



/**
 *TimerEvent2
 */
Schema.addShape({
	name: "timerNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.start.noninturrtimer'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: 2,
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "timer0"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "timer0_needle"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "timer0_num"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *EscalationEvent2
 */
Schema.addShape({
	name: "escalationNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.start.noninturrescalate'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: 2,
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "escalation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ConditionalEvent2
 */
Schema.addShape({
	name: "conditionalNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.start.noninturrconditional'/>",
	category: "bpmn",
	groupName: "startEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.condition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: 2,
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "conditional0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *SignalEvent2
 */
Schema.addShape({
	name: "signalNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.start.noninturrsignal'/>",
	category: "bpmn",
	groupName: "startEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: 2,
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "signal0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *MultipleEvent2
 */
Schema.addShape({
	name: "multipleNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.start.noninturrmulti'/>",
	category: "bpmn",
	groupName: "startEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: 2,
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "multiple0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ParallelEvent2
 */
Schema.addShape({
	name: "parallelNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.start.noninturrparallel'/>",
	category: "bpmn",
	groupName: "startEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: 2,
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "parallel0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});



//Intermediate Event -children**********************************
/**
 *MessageEvent3
 */
Schema.addShape({
	name: "messageIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catchmsg'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "message0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *TimerEvent3
 */
Schema.addShape({
	name: "timerIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catchtimer'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "timer0"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineStyle: "solid"
			},
			actions: {ref: "timer0_needle"}
		},
		{
			lineStyle: {
				lineWidth: 2,
				lineStyle: "solid"
			},
			actions: {ref: "timer0_num"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *EscalationEvent3
 */
Schema.addShape({
	name: "escalationIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catchescalate'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "escalation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ConditionalEvent3
 */
Schema.addShape({
	name: "conditionalIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catchcondition'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.condition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "conditional0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *LinkEvent3
 */
Schema.addShape({
	name: "linkIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catchlink'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "link3"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *SignalEvent3
 */
Schema.addShape({
	name: "signalIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catchsignal'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "signal0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *MultipleEvent3
 */
Schema.addShape({
	name: "multipleIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catchmulti'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "multiple0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ParallelEvent3
 */
Schema.addShape({
	name: "parallelIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catchparallel'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "parallel0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *CompensationEvent3
 */
Schema.addShape({
	name: "compensationIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catchcompensation'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "compensation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ErrorEvent3
 */
Schema.addShape({
	name: "errorIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catcherror'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "error0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *CancelEvent3
 */
Schema.addShape({
	name: "cancelIntermediateCatchEvent",
	title: "<@i18n resource='schema.bpmn.ime.catchdelete'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "cancel3"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *MessageEvent4
 */
Schema.addShape({
	name: "messageIntermediateThrowingEvent",
	title: "<@i18n resource='schema.bpmn.ime.throwmsg'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "255,255,255",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "message4"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "255,255,255",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "message4_0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *EscalationEvent4
 */
Schema.addShape({
	name: "escalationIntermediateThrowingEvent",
	title: "<@i18n resource='schema.bpmn.ime.throwecalation'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "escalation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *LinkEvent4
 */
Schema.addShape({
	name: "linkIntermediateThrowingEvent",
	title: "<@i18n resource='schema.bpmn.ime.throwlink'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "link3"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *CompensationEvent4
 */
Schema.addShape({
	name: "compensationIntermediateThrowingEvent",
	title: "<@i18n resource='schema.bpmn.ime.throwcompensation'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "compensation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *SignalEvent4
 */
Schema.addShape({
	name: "signalIntermediateThrowingEvent",
	title: "<@i18n resource='schema.bpmn.ime.throwsignal'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "signal0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *MultipleEvent4
 */
Schema.addShape({
	name: "multipleIntermediateThrowingEvent",
	title: "<@i18n resource='schema.bpmn.ime.throwmulti'/>",
	category: "bpmn",
	groupName: "intermediateEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "multiple0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

///------------Boundary Child Event
/// ------------Boundary Interrupting Child Event 
/**
 *MessageEvent3  + canvelActivity=true ---> messageBoundaryInturrputingEvent
 */
Schema.addShape({
	name: "messageBoundaryInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.msg'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "message0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *TimerEvent3  + canvelActivity=true ---> timerBoundaryInturrputingEvent
 */
Schema.addShape({
	name: "timerBoundaryInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.timer'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "timer0"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineStyle: "solid"
			},
			actions: {ref: "timer0_needle"}
		},
		{
			lineStyle: {
				lineWidth: 2,
				lineStyle: "solid"
			},
			actions: {ref: "timer0_num"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *EscalationEvent3  + canvelActivity=true ---> escalationBoundaryInturrputingEvent
 */
Schema.addShape({
	name: "escalationBoundaryInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.escalation'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "escalation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ConditionalEvent3    + canvelActivity=true ---> signalBoundaryInturrputingEvent
 */
Schema.addShape({
	name: "conditionalBoundaryInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.condition'/>",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.condition'/>", type:"string", value:"", category: "default"}
	],
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "conditional0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});


/**
 *SignalEvent3    + canvelActivity=true --->signalBoundaryInturrputingEvent
 */
Schema.addShape({
	name: "signalBoundaryInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.signal'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "signal0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *MultipleEvent3   + canvelActivity=true --->multipleBoundaryInturrputingEvent
 */
Schema.addShape({
	name: "multipleBoundaryInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.multi'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "multiple0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ParallelEvent3  + canvelActivity=true --->parallelBoundaryInturrputingEvent
 */
Schema.addShape({
	name: "parallelBoundaryInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.parallel'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "parallel0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *CompensationEvent3  + canvelActivity=true --->compensationBoundaryInturrputingEvent
 */
Schema.addShape({
	name: "compensationBoundaryInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.compensation'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "compensation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ErrorEvent3 + canvelActivity=true --->errorBoundaryInturrputingEvent
 */
Schema.addShape({
	name: "errorBoundaryInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.error'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "error0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});
/**
 *CancelEvent3 + canvelActivity=true --->cancelBoundaryInturrputingEvent
 */
Schema.addShape({
	name: "cancelBoundaryInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.cancel'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "cancel3"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/// ------------Boundary Non-Interrupting Child Event 
/**
 * Boundary Non-Interrupting Event
 */
Schema.addShape({
	name: "boundaryNonInturrputingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.noninterrupt'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
	       {
	    	   lineStyle: {
	    		   lineStyle: "dashed"
	    	   },
	    	   actions: {ref: "round"}
	       },
	       {
	    	   lineStyle: {
	    		   lineStyle: "dashed"
	    	   },
	    	   actions: {ref: "inneround"}
	       }
	       ]
});

/**
 *MessageEvent5
 */
Schema.addShape({
	name: "messageBoundaryNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.noninterruptmsg'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "message0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *TimerEvent5
 */
Schema.addShape({
	name: "timerBoundaryNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.noninterrupttimer'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "timer0"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "timer0_needle"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "timer0_num"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *EscalationEvent5
 */
Schema.addShape({
	name: "escalationBoundaryNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.noninterruptescalation'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "escalation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ConditionalEvent5
 */
Schema.addShape({
	name: "conditionalBoundaryNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.noninterruptcondition'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.condition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "conditional0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *SignalEvent5
 */
Schema.addShape({
	name: "signalBoundaryNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.noninterruptsignal'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "signal0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *MultipleEvent5
 */
Schema.addShape({
	name: "multipleBoundaryNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.noninterruptmulti'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.paralledmultiple'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "multiple0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ParallelEvent5
 */
Schema.addShape({
	name: "parallelBoundaryNonInturruptingEvent",
	title: "<@i18n resource='schema.bpmn.boundary.noninterruptparallel'/>",
	category: "bpmn",
	groupName: "boundaryEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.paralledmultiple'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "inneround"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "parallel0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});



//EndEvent --children********************************************
/**
 *MessageEvent6
 */
Schema.addShape({
	name: "messageEndEvent",
	title: "<@i18n resource='schema.bpmn.end.msg'/>",
	category: "bpmn",
	groupName: "endEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: "lineWidth + 2",
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "255,255,255",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "message4"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "255,255,255",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "message4_0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *EscalationEvent6
 */
Schema.addShape({
	name: "escalatEndEvent",
	title: "<@i18n resource='schema.bpmn.end.escalation'/>",
	category: "bpmn",
	groupName: "endEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: "lineWidth + 2",
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "escalation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *CancelEvent6
 */
Schema.addShape({
	name: "cancelEndEvent",
	title: "<@i18n resource='schema.bpmn.end.cancel'/>",
	category: "bpmn",
	groupName: "endEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: "lineWidth + 2",
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "cancel3"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *ErrorEvent6
 */
Schema.addShape({
	name: "errorEndEvent",
	title: "<@i18n resource='schema.bpmn.end.error'/>",
	category: "bpmn",
	groupName: "endEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: "lineWidth + 2",
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "error0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *CompensationEvent6
 */
Schema.addShape({
	name: "compensationEndEvent",
	title: "<@i18n resource='schema.bpmn.end.compensation'/>",
	category: "bpmn",
	groupName: "endEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: "lineWidth + 2",
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "compensation0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *SignalEvent6
 */
Schema.addShape({
	name: "signalEndEvent",
	title: "<@i18n resource='schema.bpmn.end.signal'/>",
	category: "bpmn",
	groupName: "endEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: "lineWidth + 2",
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "signal0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *MultipleEvent6
 */
Schema.addShape({
	name: "multipleEndEvent",
	title: "<@i18n resource='schema.bpmn.end.multi'/>",
	category: "bpmn",
	groupName: "endEvent",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.eventdefinition'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: "lineWidth + 2",
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "multiple0"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

/**
 *Terminate
 */
Schema.addShape({
	name: "terminate",
	title: "<@i18n resource='schema.bpmn.end.terminate'/>",
	category: "bpmn",
	groupName: "endEvent",
	props: {
		w: 40,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {
				lineWidth: "lineWidth + 2",
				lineStyle: "solid"
			},
			actions: {ref: "round"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "g_round"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "round"}
		}
	]
});

//BPMNTask --children********************************
/**
 *ManualTask 
 */
Schema.addShape({
	name: "manualTask",
	title: "<@i18n resource='schema.bpmn.task.manual'/>",
	text: "",
	category: "bpmn",
	groupName: "task",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "50,50,50",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid", 
				color: "255,255,255"
			},
			actions: {ref: "manual_task"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});


/**
 *ReceiveTask 
 */
Schema.addShape({
	name: "receiveTask",
	title: "<@i18n resource='schema.bpmn.task.receive'/>",
	text: "",
	category: "bpmn",
	groupName: "task",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "50,50,50",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid", 
				color: "255,255,255"
			},
			actions: {ref: "receive_task"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 *SendTask 
 */
Schema.addShape({
	name: "sendTask",
	title: "<@i18n resource='schema.bpmn.task.send'/>",
	text: "",
	category: "bpmn",
	groupName: "task",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "255,255,255",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "0,0,0"
			},
			actions: {ref: "receive_task_dark"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 *ServiceTask 
 */
Schema.addShape({
	name: "serviceTask",
	title: "<@i18n resource='schema.bpmn.task.service'/>",
	text: "",
	category: "bpmn",
	groupName: "task",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.implementation'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.operationref'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.iospecification'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.datainputassociations'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.dataoutputassociations'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "50,50,50",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "service_task"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 *ScriptTask 
 */
Schema.addShape({
	name: "scriptTask",
	title: "<@i18n resource='schema.bpmn.task.script'/>",
	text: "",
	category: "bpmn",
	groupName: "task",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "50,50,50",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "script_task"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 *BusinessRuleTask 
 */
Schema.addShape({
	name: "businessRuleTask",
	title: "<@i18n resource='schema.bpmn.task.bizrule'/>",
	text: "",
	category: "bpmn",
	groupName: "task",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "50,50,50",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "business_rule"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 *UserTask 
 */
Schema.addShape({
	name: "userTask",
	title: "<@i18n resource='schema.bpmn.task.user'/>",
	text: "",
	category: "bpmn",
	groupName: "task",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.renderings'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.implementation'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.resources'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.iospecification'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.datainputassociations'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.dataoutputassociations'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "50,50,50",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "255,255,255"
			},
			actions: {ref: "user_task"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

//CallActivity --children************************************
/**
 * ManualCallActivity
 */
Schema.addShape({
	name: "manualCallActivity",
	title: "<@i18n resource='schema.bpmn.callactivity.manual'/>",
	text: "",
	category: "bpmn",
	groupName: "callActivity",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"},
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {lineWidth: "lineWidth + 2"},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "50,50,50",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "255,255,255"
			},
			actions: {ref: "manual_task"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 * ScriptCallActivity
 */
Schema.addShape({
	name: "scriptCallActivity",
	title: "<@i18n resource='schema.bpmn.callactivity.script'/>",
	text: "",
	category: "bpmn",
	groupName: "callActivity",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"},
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {lineWidth: "lineWidth + 2"},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "50,50,50",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "script_task"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 * BusinessRuleCallActivity
 */
Schema.addShape({
	name: "businessRuleCallActivity",
	title: "<@i18n resource='schema.bpmn.callactivity.bizrule'/>",
	text: "",
	category: "bpmn",
	groupName: "callActivity",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"},
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {lineWidth: "lineWidth + 2"},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "50,50,50",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "business_rule"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 * UserCallActivity
 */
Schema.addShape({
	name: "userCallActivity",
	title: "<@i18n resource='schema.bpmn.callactivity.user'/>",
	text: "",
	category: "bpmn",
	groupName: "callActivity",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.renderings'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.implementation'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.resources'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.iospecification'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.datainputassociations'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.dataoutputassociations'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {lineWidth: "lineWidth + 2"},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 1,
				lineColor: "50,50,50",
				lineStyle: "solid"
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "user_task"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 * CallActivityCallProcess
 */
Schema.addShape({
	name: "callActivityCallProcess",
	title: "<@i18n resource='schema.bpmn.callactivity.process'/>",
	text: "",
	category: "bpmn",
	groupName: "callActivity",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.renderings'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.implementation'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.resources'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.iospecification'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.datainputassociations'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.dataoutputassociations'/>", type:"string", value:"", category: "default"}
	],
	attribute: {
		container: true,
		markers: ["expand"]
	},
	props: {
		w: 100,
		h: 70
	},
	path: [
		{
			lineStyle: {lineWidth: "lineWidth + 2"},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 * CallActivityCallProcessExpanded
 */
Schema.addShape({
	name: "callActivityCallProcessExpanded",
	title: "<@i18n resource='schema.bpmn.callactivity.processexpand'/>",
	text: "",
	category: "bpmn",
	groupName: "callActivity",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.loopcharacteristics'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.loopcharacteristics.standard'/>","<@i18n resource='schema.diagram.biz.loopcharacteristics.multi'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.issequential'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.isforcompensation'/>", type:"boolean", value:"false", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.renderings'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.implementation'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.resources'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.iospecification'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.datainputassociations'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.dataoutputassociations'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 200,
		h: 140
	},
	path: [
		{
			lineStyle: {lineWidth: "lineWidth + 2"},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});


//BPMNSubProcess --children***************************************
/**
 * ExpandedAdHoc
 */
Schema.addShape({
	name: "adHocSubProcess",
	title: "<@i18n resource='schema.bpmn.subprocess.adhoc'/>",
	text: "",
	category: "bpmn",
	groupName: "subProcess",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.startquantity'/>", type:"number", value:"1", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.completionquantity'/>", type:"number", value:"1", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.default'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.iospecification'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.datainputassociations'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.dataoutputassociations'/>", type:"string", value:"", category: "default"}
	],
	attribute: {
		container: true,
		markers: ["ad_hoc"],
		collapsable: true,
		collapsed: false,
		rotatable: false
	},
	props: {
		w: 400,
		h: 280
	},
	path: [
		{
			actions: {ref: "roundRectangle"}
		}
	]
});

/**
 * ExpandedTransaction
 */
Schema.addShape({
	name: "transactionSubProcess",
	title: "<@i18n resource='schema.bpmn.subprocess.transaction'/>",
	text: "",
	category: "bpmn",
	groupName: "subProcess",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.startquantity'/>", type:"number", value:"1", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.completionquantity'/>", type:"number", value:"1", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.default'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.iospecification'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.datainputassociations'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.dataoutputassociations'/>", type:"string", value:"", category: "default"}
	],
	attribute: {
		container: true,
		collapsable: true,
		collapsed: false,
		rotatable: false
	},
	props: {
		w: 400,
		h: 280
	},
	path: [
		{
			fillStyle: {type: "none"},
			actions: {ref: "roundRectangle"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			fillStyle: {type: "none"},
			actions: {ref: "inner_roundRectangle"}
		}
	]
});

/**
 * ExpandedEBSubProcess
 */
Schema.addShape({
	name: "ebSubProcess",
	title: "<@i18n resource='schema.bpmn.subprocess.eventbased'/>",
	text: "",
	category: "bpmn",
	groupName: "subProcess",
	attribute: {
		container: true,
		collapsable: true,
		collapsed: false,
		rotatable: false
	},
	props: {
		w: 400,
		h: 280
	},
	path: [
		{
			lineStyle: {
				lineStyle: "dashed"
			},
			actions: {ref: "roundRectangle"}
		}
	]
});

//BPMNGateway --children**************************
/**
 * ExclusiveGateway
 */
Schema.addShape({
	name: "exclusiveGateway",
	title: "<@i18n resource='schema.bpmn.gateway.exclusive'/>",
	category: "bpmn",
	groupName: "bpmnGateway",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.gatewaydirection'/>", type:"list", value:"", category: "default",listItems:["<@i18n resource='schema.diagram.biz.gatewaydirection.unspecified'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.converging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.diverging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.mixed'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.default'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 50,
		h: 50
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			actions: {ref: "gateway0"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: [
				{action: "move", x: "w*0.5 + w*0.5*0.4 - w*0.02", y: "h*0.5 - h*0.5*0.4 - h*0.02"},
				{action: "line", x: "w*0.5 - w*0.5*0.4 - w*0.02", y: "h*0.5 + h*0.5*0.4 - h*0.02"},
				{action: "line", x: "w*0.5 - w*0.5*0.4 + w*0.02", y: "h*0.5 + h*0.5*0.4 + h*0.02"},
				{action: "line", x: "w*0.5 + w*0.5*0.4 + w*0.02", y: "h*0.5 - h*0.5*0.4 + h*0.02"},
				{action: "line", x: "w*0.5 + w*0.5*0.4 - w*0.02", y: "h*0.5 - h*0.5*0.4 - h*0.02"},
				{action: "close"}
			]
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: [
				{action: "move", x: "w*0.5", y: "h*0.5"},
				{action: "move", x: "w*0.5 - w*0.5*0.4 + w*0.02", y: "h*0.5 - h*0.5*0.4 - h*0.02"},
				{action: "line", x: "w*0.5 + w*0.5*0.4 + w*0.02", y: "h*0.5 + h*0.5*0.4 - h*0.02"},
				{action: "line", x: "w*0.5 + w*0.5*0.4 - w*0.02", y: "h*0.5 + h*0.5*0.4 + h*0.02"},
				{action: "line", x: "w*0.5 - w*0.5*0.4 - w*0.02", y: "h*0.5 - h*0.5*0.4 + h*0.02"},
				{action: "close"}
			]
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "gateway0"}
		}
	]
});

/**
 * InclusiveGateway
 */
Schema.addShape({
	name: "inclusiveGateway",
	title: "<@i18n resource='schema.bpmn.gateway.inclusive'/>",
	category: "bpmn",
	groupName: "bpmnGateway",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.gatewaydirection'/>", type:"list", value:"", category: "default",listItems:["<@i18n resource='schema.diagram.biz.gatewaydirection.unspecified'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.converging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.diverging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.mixed'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.default'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 50,
		h: 50
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			actions: {ref: "gateway0"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "g_round"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "gateway0"}
		}
	]
});

/**
 * ComplexGateway
 */
Schema.addShape({
	name: "complexGateway",
	title: "<@i18n resource='schema.bpmn.gateway.complex'/>",
	category: "bpmn",
	groupName: "bpmnGateway",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.gatewaydirection'/>", type:"list", value:"", category: "default",listItems:["<@i18n resource='schema.diagram.biz.gatewaydirection.unspecified'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.converging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.diverging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.mixed'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.activationcondition'/>", type:"string", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.activationcount'/>", type:"number", value:"", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.waitingforstart'/>", type:"boolean", value:"true", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.default'/>", type:"string", value:"", category: "default"},
	],
	props: {
		w: 50,
		h: 50
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			actions: {ref: "gateway0"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "complex_gateway0"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "complex_gateway1"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "complex_gateway2"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "complex_gateway3"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "gateway0"}
		}
	]
});

/**
 * EventBasedGateway
 */
Schema.addShape({
	name: "eventBasedGateway",
	title: "<@i18n resource='schema.bpmn.gateway.eventbased'/>",
	category: "bpmn",
	groupName: "bpmnGateway",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.gatewaydirection'/>", type:"list", value:"", category: "default",listItems:["<@i18n resource='schema.diagram.biz.gatewaydirection.unspecified'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.converging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.diverging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.mixed'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.instantiate'/>", type:"boolean", value:"false", category: "default"}
	],
	props: {
		w: 50,
		h: 50
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			actions: {ref: "gateway0"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "event_based_gateway"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "gateway0"}
		}
	]
});

/**
 * EventBasedStartGateway
 */
Schema.addShape({
	name: "eventBasedStartGateway",
	title: "<@i18n resource='schema.bpmn.gateway.eventbasedinstance'/>",
	category: "bpmn",
	groupName: "bpmnGateway",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.gatewaydirection'/>", type:"list", value:"", category: "default",listItems:["<@i18n resource='schema.diagram.biz.gatewaydirection.unspecified'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.converging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.diverging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.mixed'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.instantiate'/>", type:"boolean", value:"false", category: "default"}
	],
	props: {
		w: 50,
		h: 50
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			actions: {ref: "gateway0"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "event_based_start_gateway"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "gateway0"}
		}
	]
});

/**
 * ParallelGateway
 */
Schema.addShape({
	name: "parallelGateway",
	title: "<@i18n resource='schema.bpmn.gateway.parallel'/>",
	category: "bpmn",
	groupName: "bpmnGateway",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.gatewaydirection'/>", type:"list", value:"", category: "default",listItems:["<@i18n resource='schema.diagram.biz.gatewaydirection.unspecified'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.converging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.diverging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.mixed'/>"]},
	],
	props: {
		w: 50,
		h: 50
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			actions: {ref: "gateway0"}
		},
		{
			lineStyle: {
				lineWidth: 0,
				lineStyle: "solid"
			},
			fillStyle: {
				type:"solid",
				color: "50,50,50"
			},
			actions: {ref: "parallel_gateway"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "gateway0"}
		}
	]
});

/**
 * ParallelEBGateway
 */
Schema.addShape({
	name: "parallelEBGateway",
	title: "<@i18n resource='schema.bpmn.gateway.parallelinstance'/>",
	category: "bpmn",
	groupName: "bpmnGateway",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.gatewaydirection'/>", type:"list", value:"", category: "default",listItems:["<@i18n resource='schema.diagram.biz.gatewaydirection.unspecified'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.converging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.diverging'/>","<@i18n resource='schema.diagram.biz.gatewaydirection.mixed'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.instantiate'/>", type:"boolean", value:"false", category: "default"}
	],
	props: {
		w: 50,
		h: 50
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			actions: {ref: "gateway0"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "g_round"}
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "parallel_eventbased_gateway"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {
				type: "none"
			},
			actions: {ref: "gateway0"}
		}
	]
});


//BPMNDataObject --children**************************************
/**
 * DataInObject
 */
Schema.addShape({
	name: "dataInObject",
	title: "<@i18n resource='schema.bpmn.datainobject'/>",
	category: "bpmn",
	groupName: "dataObject",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.iscollection'/>", type:"boolean", value:"false", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.itemsubjectref'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 90,
		h: 120
	},
	path: [
		{
			actions: [
				{action: "move", x: "0", y: "0"},
				{action: "line", x: "0", y: "h"},
				{action: "line", x: "w", y: "h"},
				{action: "line", x: "w", y: "h*0.25"},
				{action: "line", x: "w*2/3", y: "0"},
				{action: "line", x: "0", y: "0"},
				{action: "close"}
			]
		},
		{
			actions: [
				{action: "move", x: "w*2/3", y: "0"},
				{action: "line", x: "w*2/3", y: "h*0.25"},
				{action: "line", x: "w", y: "h*0.25"}
			]
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			actions: {ref: "data_in_object"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {type: "none"},
			actions: {ref: "rectangle"}
		}
	]
});

/**
 * DataOutObject
 */
Schema.addShape({
	name: "dataOutObject",
	title: "<@i18n resource='schema.bpmn.dataoutobject'/>",
	category: "bpmn",
	groupName: "dataObject",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.iscollection'/>", type:"boolean", value:"false", category: "default"},
		{name: "<@i18n resource='schema.diagram.biz.itemsubjectref'/>", type:"string", value:"", category: "default"}
	],
	props: {
		w: 90,
		h: 120
	},
	path: [
		{
			actions: [
				{action: "move", x: "0", y: "0"},
				{action: "line", x: "0", y: "h"},
				{action: "line", x: "w", y: "h"},
				{action: "line", x: "w", y: "h*0.25"},
				{action: "line", x: "w*2/3", y: "0"},
				{action: "line", x: "0", y: "0"},
				{action: "close"}
			]
		},
		{
			actions: [
				{action: "move", x: "w*2/3", y: "0"},
				{action: "line", x: "w*2/3", y: "h*0.25"},
				{action: "line", x: "w", y: "h*0.25"}
			]
		},
		{
			lineStyle: {
				lineStyle: "solid"
			},
			fillStyle: {
				type: "solid",
				color: "50,50,50"
			},
			actions: {ref: "data_in_object"}
		},
		{
			lineStyle: {
				lineWidth: 0
			},
			fillStyle: {type: "none"},
			actions: {ref: "rectangle"}
		}
	]
});


//BPMNConversation --children**************************************************
/**
 * SubConversation
 */
Schema.addShape({
	name: "subConversation",
	title: "<@i18n resource='schema.bpmn.conversation.sub'/>",
	category: "bpmn",
	groupName: "conversation",
	attribute: {
		container: true,
		markers: ["expand"]
	},
	props: {
		w: 45,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			actions: [
				{action: "move", x: "Math.min(w,h)*0.21", y: "0"},
				{action: "line", x: "w-Math.min(w,h)*0.21", y: "0"},
				{action: "line", x: "w", y: "h*0.5"},
				{action: "line", x: "w-Math.min(w,h)*0.21", y: "h"},
				{action: "line", x: "Math.min(w,h)*0.21", y: "h"},
				{action: "line", x: "0", y: "h*0.5"},
				{action: "line", x: "Math.min(w,h)*0.21", y: "0"},
				{action: "close"}
			]
		}
	]
});

/**
 * CallConversation
 */
Schema.addShape({
	name: "callConversation",
	title: "<@i18n resource='schema.bpmn.conversation.call'/>",
	category: "bpmn",
	groupName: "conversation",
	props: {
		w: 45,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {lineWidth: "lineWidth + 2"},
			actions: [
				{action: "move", x: "Math.min(w,h)*0.21", y: "0"},
				{action: "line", x: "w-Math.min(w,h)*0.21", y: "0"},
				{action: "line", x: "w", y: "h*0.5"},
				{action: "line", x: "w-Math.min(w,h)*0.21", y: "h"},
				{action: "line", x: "Math.min(w,h)*0.21", y: "h"},
				{action: "line", x: "0", y: "h*0.5"},
				{action: "line", x: "Math.min(w,h)*0.21", y: "0"},
				{action: "close"}
			]
		}
	]
});

/**
 * CallCollabConversation
 */
Schema.addShape({
	name: "callCollabConversation",
	title: "<@i18n resource='schema.bpmn.conversation.callcollaboration'/>",
	category: "bpmn",
	groupName: "conversation",
	attribute: {
		container: true,
		markers: ["expand"]
	},
	props: {
		w: 45,
		h: 40
	},
	textBlock: [{position: {x: "w/2-60", y: "h", w: "120", h: "30"}}],
	path: [
		{
			lineStyle: {lineWidth: "lineWidth + 2"},
			actions: [
				{action: "move", x: "Math.min(w,h)*0.21", y: "0"},
				{action: "line", x: "w-Math.min(w,h)*0.21", y: "0"},
				{action: "line", x: "w", y: "h*0.5"},
				{action: "line", x: "w-Math.min(w,h)*0.21", y: "h"},
				{action: "line", x: "Math.min(w,h)*0.21", y: "h"},
				{action: "line", x: "0", y: "h*0.5"},
				{action: "line", x: "Math.min(w,h)*0.21", y: "0"},
				{action: "close"}
			]
		}
	]
});

//choreographyTask--children**************************************************
Schema.addShape({
	name: "subChoreography",
	title: "<@i18n resource='schema.bpmn.choreography.sub'/>",
	category: "bpmn",
	groupName: "choreographyTask",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.initiatingparticipantref'/>", type:"string", value:"", category: "default"}
	],
	attribute: {
		markers: ["expand"],
		markerOffset: 30
	},
	props: {
		w: 120,
		h: 120
	},
	textBlock: [
		{
			position: {x: 5, y: "30", w: "w-10", h: "h-60"},
			text: "<@i18n resource='schema.bpmn.choreography.sub'/>"
		},
		{
			position: {x: 5, y: 0, w: "w-10", h: 25},
			text: "<@i18n resource='schema.bpmn.choreography.participanta'/>"
		},
		{
			position: {x: 5, y: "h-25", w: "w-10", h: 25},
			text: "<@i18n resource='schema.bpmn.choreography.participantb'/>"
		}
	],
	path: [
		{
			lineStyle: {lineWidth: 0},
			actions: {ref: "choreography_task"}
		},{
			fillStyle: {type: "solid", color: "r-50,g-50,b-50"},
			lineStyle: {lineWidth: 0},
			actions: [
				{action: "move", x: 0, y: "h-25"},
				{action: "line", x: "w", y: "h-25"},
				{action: "line", x: "w", y: "h-6"},
				{action: "quadraticCurve", x1: "w", y1: "h", x: "w-6", y: "h"},
				{action: "line", x: "6", y: "h"},
				{action: "quadraticCurve", x1: "0", y1: "h", x: "0", y: "h-6"},
				{action: "close"}
			]
		},{
			fileStyle: {type: "none"},
			actions: [
				{action: "move", x: 0, y: 25},
				{action: "line", x: "w", y: 25}
			]
		},{
			fileStyle: {type: "none"},
			actions: [
				{action: "move", x: 0, y: "h-25"},
				{action: "line", x: "w", y: "h-25"}
			]
		},{
			fillStyle: {type: "none"},
			actions: {ref: "choreography_task"}
		}
	],
	drawIcon: function(w, h){
		return drawChoreographyIcon(w, h, false);
	}
});

Schema.addShape({
	name: "callChoreographyGlobal",
	title: "<@i18n resource='schema.bpmn.choreography.call'/>",
	category: "bpmn",
	groupName: "choreographyTask",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.looptype'/>", type:"list", value:"", category: "default",listItems:["","<@i18n resource='schema.diagram.biz.looptype.standard'/>","<@i18n resource='schema.diagram.biz.looptype.multilnstancesequential'/>","<@i18n resource='schema.diagram.biz.looptype.multilnstanceparallel'/>"]},
		{name: "<@i18n resource='schema.diagram.biz.initiatingparticipantref'/>", type:"string", value:"", category: "default"}
	],
	attribute: {
		markerOffset: 30
	},
	props: {
		w: 120,
		h: 120
	},
	textBlock: [
		{
			position: {x: 5, y: "30", w: "w-10", h: "h-60"},
			text: ""
		},
		{
			position: {x: 5, y: 0, w: "w-10", h: 25},
			text: "<@i18n resource='schema.bpmn.choreography.participanta'/>"
		},
		{
			position: {x: 5, y: "h-25", w: "w-10", h: 25},
			text: "<@i18n resource='schema.bpmn.choreography.participantb'/>"
		}
	],
	path: [
		{
			lineStyle: {lineWidth: 0},
			actions: {ref: "choreography_task"}
		},{
			fillStyle: {type: "solid", color: "r-50,g-50,b-50"},
			lineStyle: {lineWidth: 0},
			actions: [
				{action: "move", x: 0, y: "h-25"},
				{action: "line", x: "w", y: "h-25"},
				{action: "line", x: "w", y: "h-6"},
				{action: "quadraticCurve", x1: "w", y1: "h", x: "w-6", y: "h"},
				{action: "line", x: "6", y: "h"},
				{action: "quadraticCurve", x1: "0", y1: "h", x: "0", y: "h-6"},
				{action: "close"}
			]
		},{
			fileStyle: {type: "none"},
			lineStyle: {lineWidth: "lineWidth+2"},
			actions: [
				{action: "move", x: 0, y: 25},
				{action: "line", x: "w", y: 25}
			]
		},{
			fileStyle: {type: "none"},
			lineStyle: {lineWidth: "lineWidth+2"},
			actions: [
				{action: "move", x: 0, y: "h-25"},
				{action: "line", x: "w", y: "h-25"}
			]
		},{
			fillStyle: {type: "none"},
			lineStyle: {lineWidth: "lineWidth+2"},
			actions: {ref: "choreography_task"}
		}
	],
	drawIcon: function(w, h){
		return drawChoreographyIcon(w, h, true);
	}
});

Schema.addShape({
	name: "callChoreography",
	title: "<@i18n resource='schema.bpmn.choreography.callchoreography'/>",
	text: "",
	category: "bpmn",
	groupName: "choreographyTask",
	dataAttributes:[
		{name: "<@i18n resource='schema.diagram.biz.initiatingparticipantref'/>", type:"string", value:"", category: "default"}
	],
	attribute: {
		markers: ["expand"],
		markerOffset: 30
	},
	props: {
		w: 120,
		h: 120
	},
	textBlock: [
		{
			position: {x: 5, y: "30", w: "w-10", h: "h-60"},
			text: ""
		},
		{
			position: {x: 5, y: 0, w: "w-10", h: 25},
			text: "<@i18n resource='schema.bpmn.choreography.participanta'/>"
		},
		{
			position: {x: 5, y: "h-25", w: "w-10", h: 25},
			text: "<@i18n resource='schema.bpmn.choreography.participantb'/>"
		}
	],
	path: [
		{
			lineStyle: {lineWidth: 0},
			actions: {ref: "choreography_task"}
		},{
			fillStyle: {type: "solid", color: "r-50,g-50,b-50"},
			lineStyle: {lineWidth: 0},
			actions: [
				{action: "move", x: 0, y: "h-25"},
				{action: "line", x: "w", y: "h-25"},
				{action: "line", x: "w", y: "h-6"},
				{action: "quadraticCurve", x1: "w", y1: "h", x: "w-6", y: "h"},
				{action: "line", x: "6", y: "h"},
				{action: "quadraticCurve", x1: "0", y1: "h", x: "0", y: "h-6"},
				{action: "close"}
			]
		},{
			fileStyle: {type: "none"},
			lineStyle: {lineWidth: "lineWidth+2"},
			actions: [
				{action: "move", x: 0, y: 25},
				{action: "line", x: "w", y: 25}
			]
		},{
			fileStyle: {type: "none"},
			lineStyle: {lineWidth: "lineWidth+2"},
			actions: [
				{action: "move", x: 0, y: "h-25"},
				{action: "line", x: "w", y: "h-25"}
			]
		},{
			fillStyle: {type: "none"},
			lineStyle: {lineWidth: "lineWidth+2"},
			actions: {ref: "choreography_task"}
		}
	],
	drawIcon: function(w, h){
		return drawChoreographyIcon(w, h, true);
	}
});

package net.dongshuai.cart.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.fastjson.JSON;

import entity.Result;
import net.dongshuai.cart.service.CartService;
import net.dongshuai.pojogroup.Cart;
import utils.CookieUtil;

/**
 * 购物车
 * 
 * @author 董帅
 */
@RestController
@RequestMapping("/cart")
public class CartController {

    @Reference(timeout=10000)
    private CartService cartService;

    @Autowired
    private HttpServletRequest request;

    @Autowired
    private HttpServletResponse response;

    /**
     * 操作购物车
     * 
     * @param itemId
     * @param num
     * @return
     */
    @RequestMapping("/addGoodsToCartList")
    @CrossOrigin(origins="http://localhost:9105")
    public Result addGoodsToCartList(Long itemId, Integer num) {
        //Spring 4.2 之前使用下面这种, 4.2之后, 可以使用上面的@CrossOrigin注解
        //允许所有域可以访问
        //response.setHeader("Access-Control-Allow-Origin", "*");
        
        //允许某个域可以访问 (当此方法不需要操作cookie时, 写这一句即可)
        //response.setHeader("Access-Control-Allow-Origin", "http://localhost:9105");
        
        //允许携带凭证, (如果操作cookie, 需要加上这句, 并且上面语句不能写 *)
        //response.setHeader("Access-Control-Allow-Credentials", "true");

        try {

            // 提取购物车
            List<Cart> cartList = findCartList();

            // 调用服务方法操作购物车
            cartList = cartService.addGoodsToCartList(cartList, itemId, num);

            // 当前登录账号
            String username = SecurityContextHolder.getContext().getAuthentication().getName();
            
            // 未登录
            if ("anonymousUser".equals(username)) {
                // 将新的购物车存入cookie
                String cartListString = JSON.toJSONString(cartList);
                CookieUtil.setCookie(request, response, "cartList", cartListString, 3600 * 24, "UTF-8");
            } else {
                // 如果登录
                cartService.saveCartListToRedis(username, cartList);

            }

            return new Result(true, "存入购物车成功");
        } catch (Exception e) {
            e.printStackTrace();
            return new Result(false, "存入购物车失败");
        }

    }

    /**
     * 提取购物车
     * 
     * @return
     */
    @RequestMapping("/findCartList")
    public List<Cart> findCartList() {

        // 当前登录账号
        String username = SecurityContextHolder.getContext().getAuthentication().getName();
        
        // 从cookie中提取购物车
        String cartListString = CookieUtil.getCookieValue(request, "cartList", "UTF-8");
        if (cartListString == null || cartListString.equals("")) {
            cartListString = "[]";
        }
        List<Cart> cartListCookie = JSON.parseArray(cartListString, Cart.class);
        
        // 未登录
        if ("anonymousUser".equals(username)) {
            return cartListCookie;
        } else {
            // 已登录
            //获取redis中的购物车
            List<Cart> cartListRedis = cartService.findCartListFromRedis(username);
            
            //判断, 本地购物车存在数据时,才合并
            if (cartListCookie.size() > 0) {
              //合并后的购物车
                List<Cart> cartList = cartService.mergeCartList(cartListRedis, cartListCookie);
                //将合并后的购物车存入redis
                cartService.saveCartListToRedis(username, cartList);
                //清除本地购物车
                CookieUtil.deleteCookie(request, response, "cartList");
                return cartList;
            }
            
            return cartListRedis;
        }

    }
}

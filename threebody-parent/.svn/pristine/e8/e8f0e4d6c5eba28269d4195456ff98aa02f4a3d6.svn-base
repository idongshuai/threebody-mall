package net.dongshuai.page.service.impl;

import java.io.FileWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;

import com.alibaba.dubbo.config.annotation.Service;

import freemarker.template.Configuration;
import freemarker.template.Template;
import net.dongshuai.mapper.TbGoodsDescMapper;
import net.dongshuai.mapper.TbGoodsMapper;
import net.dongshuai.mapper.TbItemCatMapper;
import net.dongshuai.mapper.TbItemMapper;
import net.dongshuai.page.service.ItemPageService;
import net.dongshuai.pojo.TbGoods;
import net.dongshuai.pojo.TbGoodsDesc;
import net.dongshuai.pojo.TbItem;
import net.dongshuai.pojo.TbItemExample;
import net.dongshuai.pojo.TbItemExample.Criteria;

/**
 * 生成页面
 * @author 董帅
 */
@Service
public class ItemPageServiceImpl implements ItemPageService {
    
    @Autowired
    private FreeMarkerConfigurer freeMarkerConfigurer;
    
    @Value("${pagedir}")
    private String pagedir;
    
    
    @Autowired
    private TbGoodsMapper goodsMapper;
    
    @Autowired
    private TbGoodsDescMapper goodsDescMapper;
    
    @Autowired
    private TbItemCatMapper itemCatMapper;
    
    @Autowired
    private TbItemMapper itemMapper;

    /**
     * 生成商品详细页
     */
    @Override
    public boolean genItemHtml(Long goodsId) {
        
        Configuration configuration = freeMarkerConfigurer.getConfiguration();
        try {
            Template template = configuration.getTemplate("item.ftl");
            //创建数据模型
            Map dataModel = new HashMap();
            //1.商品主表数据
            TbGoods goods = goodsMapper.selectByPrimaryKey(goodsId);
            dataModel.put("goods", goods);
            //2.商品扩展表数据
            TbGoodsDesc goodsDesc = goodsDescMapper.selectByPrimaryKey(goodsId);
            dataModel.put("goodsDesc", goodsDesc);
            //3.读取商品分类
            String itemCat1 = itemCatMapper.selectByPrimaryKey(goods.getCategory1Id()).getName();
            String itemCat2 = itemCatMapper.selectByPrimaryKey(goods.getCategory2Id()).getName();
            String itemCat3 = itemCatMapper.selectByPrimaryKey(goods.getCategory3Id()).getName();
            dataModel.put("itemCat1", itemCat1);
            dataModel.put("itemCat2", itemCat2);
            dataModel.put("itemCat3", itemCat3);
            
            //4.读取SKU列表
            TbItemExample example = new TbItemExample();
            Criteria criteria = example.createCriteria();
            criteria.andGoodsIdEqualTo(goodsId);
            //状态有效
            criteria.andStatusEqualTo("1");
            //按是否默认字段进行降序排序, 目的是返回的结果第一条为默认SKU
            example.setOrderByClause("is_default desc");
            
            List<TbItem> itemList = itemMapper.selectByExample(example);
            dataModel.put("itemList", itemList);
            
            Writer out = new FileWriter(pagedir + goodsId + ".html");

            template.process(dataModel, out);
            
            out.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        
    }

}
